{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Welcome","text":""},{"location":"index.html#welcome-to-budget-tracker-api","title":"Welcome to Budget Tracker API","text":""},{"location":"index.html#purpose","title":"Purpose","text":"<p>This simple platform was created for personal use, with the goal of refining and improving knowledge across several best practices: CI/CD, software engineering, observability, and security.</p> <p>As an additional outcome, it provides a functional CRUD system designed to help manage day-to-day finances \u2014 keeping track of them to enable smarter decisions later on. This will become clearer once you reach the #architecture section.</p> <p>As a \u201cclassical\u201d REST API application, you can also use it as your personal backend for further studies. For instance, you might want to experiment with an MCP server using a real-world API (rather than the usual public JSON endpoints scattered across the internet) to learn from a realistic example.</p> <p>Proceed with learning purposes in mind</p> <p>This app contains some overengineering throughout the ecosystem. It isn\u2019t necessarily intended to be \u201cproduction-ready\u201d out of the box, but it aims to follow most production best practices.</p>"},{"location":"index.html#target-audience","title":"Target Audience","text":"<p>This application is aimed at technology enthusiasts and IT professionals. It\u2019s not a SaaS application ready to be used directly from a public URL. Instead, it requires you to clone the repository and explore it locally before considering deploying your own instance.</p>"},{"location":"contributing.html","title":"Contributing","text":""},{"location":"contributing.html#contributions","title":"Contributions","text":"<p>Still in development</p> <p>This guide is still not in development, a process will be created to allow other developers and enthusiasts to create your own PR to this repo if needed.</p> <p>Either way, forking this repo instead of simply \"downloading it\" will be required in case of contributions (or if you want to use the app on your own).</p>"},{"location":"swagger.html","title":"Swagger","text":""},{"location":"api/packages/controller.html","title":"Controller","text":""},{"location":"api/packages/controller.html#controller","title":"controller","text":"<pre><code>import \"budget-tracker-api-v2/internal/http/controller\"\n</code></pre>"},{"location":"api/packages/controller.html#index","title":"Index","text":"<ul> <li>func GenerateJWTAccessToken(ctx context.Context, jwtKey string, sub string, login string) (string, error)</li> <li>func GenerateJWTRefreshToken(ctx context.Context, jwtKey string, sub string) (string, error)</li> <li>func SwaggerRegisterRouter(r *mux.Router)</li> <li>type AuthController</li> <li>func (uc *AuthController) CreateToken(w http.ResponseWriter, r *http.Request)</li> <li>func (ac *AuthController) RegisterRoutes(r *mux.Router)</li> <li>type CardDeletedMessage</li> <li>type CardsController</li> <li>func (uc *CardsController) CreateCard(w http.ResponseWriter, r *http.Request)</li> <li>func (uc *CardsController) DeleteCard(w http.ResponseWriter, r *http.Request)</li> <li>func (uc *CardsController) GetCard(w http.ResponseWriter, r *http.Request)</li> <li>func (uc *CardsController) GetCards(w http.ResponseWriter, r *http.Request)</li> <li>func (uc *CardsController) RegisterRoutes(r *mux.Router)</li> <li>type CardsCreatedMessage</li> <li>type CardsErrorMessage</li> <li>type HealthController</li> <li>func (uc *HealthController) HealthCheck(w http.ResponseWriter, r *http.Request)</li> <li>func (uc *HealthController) RegisterRoutes(r *mux.Router)</li> <li>type UsersController</li> <li>func (uc *UsersController) CreateUser(w http.ResponseWriter, r *http.Request)</li> <li>func (uc *UsersController) GetUser(w http.ResponseWriter, r *http.Request)</li> <li>func (uc *UsersController) RegisterRoutes(r *mux.Router)</li> </ul>"},{"location":"api/packages/controller.html#func-generatejwtaccesstoken","title":"func GenerateJWTAccessToken","text":"<pre><code>func GenerateJWTAccessToken(ctx context.Context, jwtKey string, sub string, login string) (string, error)\n</code></pre> <p>GenerateJWTAccessToken will generate a JWT access token</p> <p></p>"},{"location":"api/packages/controller.html#func-generatejwtrefreshtoken","title":"func GenerateJWTRefreshToken","text":"<pre><code>func GenerateJWTRefreshToken(ctx context.Context, jwtKey string, sub string) (string, error)\n</code></pre> <p>GenerateJWTRefreshToken will generate a new refresh token</p> <p></p>"},{"location":"api/packages/controller.html#func-swaggerregisterrouter","title":"func SwaggerRegisterRouter","text":"<pre><code>func SwaggerRegisterRouter(r *mux.Router)\n</code></pre>"},{"location":"api/packages/controller.html#type-authcontroller","title":"type AuthController","text":"<pre><code>type AuthController struct {\n    Tracer   trace.Tracer\n    UserRepo repository.UserCollectionInterface\n}\n</code></pre>"},{"location":"api/packages/controller.html#func-authcontroller-createtoken","title":"func (*AuthController) CreateToken","text":"<pre><code>func (uc *AuthController) CreateToken(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>GetCards handler list of all card within the platform without filters. Deprecated.</p> <p></p>"},{"location":"api/packages/controller.html#func-authcontroller-registerroutes","title":"func (*AuthController) RegisterRoutes","text":"<pre><code>func (ac *AuthController) RegisterRoutes(r *mux.Router)\n</code></pre> <p>RegisterRoutes register router for handling Card operations</p> <p></p>"},{"location":"api/packages/controller.html#type-carddeletedmessage","title":"type CardDeletedMessage","text":"<pre><code>type CardDeletedMessage struct {\n    Message    string `json:\"message\"`\n    ID         string `json:\"id\"`\n    StatusCode int32  `json:\"status_code,omitempty\"`\n}\n</code></pre>"},{"location":"api/packages/controller.html#type-cardscontroller","title":"type CardsController","text":"<p>CardsController injects CardRepository to controllers</p> <pre><code>type CardsController struct {\n    Tracer trace.Tracer\n    Repo   repository.CardCollectionInterface\n}\n</code></pre> <p></p>"},{"location":"api/packages/controller.html#func-cardscontroller-createcard","title":"func (*CardsController) CreateCard","text":"<pre><code>func (uc *CardsController) CreateCard(w http.ResponseWriter, r *http.Request)\n</code></pre>"},{"location":"api/packages/controller.html#func-cardscontroller-deletecard","title":"func (*CardsController) DeleteCard","text":"<pre><code>func (uc *CardsController) DeleteCard(w http.ResponseWriter, r *http.Request)\n</code></pre>"},{"location":"api/packages/controller.html#func-cardscontroller-getcard","title":"func (*CardsController) GetCard","text":"<pre><code>func (uc *CardsController) GetCard(w http.ResponseWriter, r *http.Request)\n</code></pre>"},{"location":"api/packages/controller.html#func-cardscontroller-getcards","title":"func (*CardsController) GetCards","text":"<pre><code>func (uc *CardsController) GetCards(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>GetCards handler list of all card within the platform without filters. Deprecated.</p> <p></p>"},{"location":"api/packages/controller.html#func-cardscontroller-registerroutes","title":"func (*CardsController) RegisterRoutes","text":"<pre><code>func (uc *CardsController) RegisterRoutes(r *mux.Router)\n</code></pre> <p>RegisterRoutes register router for handling Card operations</p> <p></p>"},{"location":"api/packages/controller.html#type-cardscreatedmessage","title":"type CardsCreatedMessage","text":"<pre><code>type CardsCreatedMessage struct {\n    Message    string     `json:\"message\"`\n    ID         string     `json:\"id\"`\n    OwnerID    string     `json:\"owner_id\"`\n    StatusCode int32      `json:\"status_code\"`\n    Card       model.Card `json:\"card\"`\n}\n</code></pre>"},{"location":"api/packages/controller.html#type-cardserrormessage","title":"type CardsErrorMessage","text":"<pre><code>type CardsErrorMessage struct {\n    Message    string `json:\"message\"`\n    Details    string `json:\"details\"`\n    StatusCode int32  `json:\"status_code,omitempty\"`\n}\n</code></pre>"},{"location":"api/packages/controller.html#type-healthcontroller","title":"type HealthController","text":"<pre><code>type HealthController struct {\n    Tracer     trace.Tracer\n    HealthRepo repository.HealthCollectionInterface\n}\n</code></pre>"},{"location":"api/packages/controller.html#func-healthcontroller-healthcheck","title":"func (*HealthController) HealthCheck","text":"<pre><code>func (uc *HealthController) HealthCheck(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>Ping handler list of all card within the platform without filters. Deprecated.</p> <p></p>"},{"location":"api/packages/controller.html#func-healthcontroller-registerroutes","title":"func (*HealthController) RegisterRoutes","text":"<pre><code>func (uc *HealthController) RegisterRoutes(r *mux.Router)\n</code></pre> <p>RegisterRoutes register router for handling healthcheck operations</p> <p></p>"},{"location":"api/packages/controller.html#type-userscontroller","title":"type UsersController","text":"<p>UsersController injects UserRepository to controllers</p> <pre><code>type UsersController struct {\n    Tracer trace.Tracer\n    Repo   repository.UserCollectionInterface\n}\n</code></pre> <p></p>"},{"location":"api/packages/controller.html#func-userscontroller-createuser","title":"func (*UsersController) CreateUser","text":"<pre><code>func (uc *UsersController) CreateUser(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>CreateUser create a new user within the platform</p> <p></p>"},{"location":"api/packages/controller.html#func-userscontroller-getuser","title":"func (*UsersController) GetUser","text":"<pre><code>func (uc *UsersController) GetUser(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>GetUser will find a single user based on ID</p> <p></p>"},{"location":"api/packages/controller.html#func-userscontroller-registerroutes","title":"func (*UsersController) RegisterRoutes","text":"<pre><code>func (uc *UsersController) RegisterRoutes(r *mux.Router)\n</code></pre> <p>RegisterRoutes register router for handling User operations</p> <p>Generated by gomarkdoc</p>"},{"location":"api/packages/crypt.html","title":"Crypt","text":""},{"location":"api/packages/crypt.html#crypt","title":"crypt","text":"<pre><code>import \"budget-tracker-api-v2/internal/utils/crypt\"\n</code></pre>"},{"location":"api/packages/crypt.html#index","title":"Index","text":"<ul> <li>func CheckPasswordHash(password, hash string) bool</li> <li>func GenerateSaltedPassword(plainPassword string) (saltedPass string, err error)</li> </ul>"},{"location":"api/packages/crypt.html#func-checkpasswordhash","title":"func CheckPasswordHash","text":"<pre><code>func CheckPasswordHash(password, hash string) bool\n</code></pre> <p>CheckPasswordHash will valid if hash matches a given plaintext password</p> <p></p>"},{"location":"api/packages/crypt.html#func-generatesaltedpassword","title":"func GenerateSaltedPassword","text":"<pre><code>func GenerateSaltedPassword(plainPassword string) (saltedPass string, err error)\n</code></pre> <p>GenerateSaltedPassword will return a hashed password</p> <p>Generated by gomarkdoc</p>"},{"location":"api/packages/middleware.html","title":"Middleware","text":""},{"location":"api/packages/middleware.html#middleware","title":"middleware","text":"<pre><code>import \"budget-tracker-api-v2/internal/http/middleware\"\n</code></pre>"},{"location":"api/packages/middleware.html#index","title":"Index","text":"<ul> <li>func InjectHeaders(next http.Handler) http.Handler</li> <li>func RequireContentTypeJSON(h http.Handler) http.Handler</li> <li>func RequireTokenAuthentication(h http.Handler) http.Handler</li> </ul>"},{"location":"api/packages/middleware.html#func-injectheaders","title":"func InjectHeaders","text":"<pre><code>func InjectHeaders(next http.Handler) http.Handler\n</code></pre> <p>InjectHeaders acts as a middleware between routers to inject common response headers</p> <p></p>"},{"location":"api/packages/middleware.html#func-requirecontenttypejson","title":"func RequireContentTypeJSON","text":"<pre><code>func RequireContentTypeJSON(h http.Handler) http.Handler\n</code></pre> <p>RequireContentTypeJSON enforces JSON content-type from requests</p> <p></p>"},{"location":"api/packages/middleware.html#func-requiretokenauthentication","title":"func RequireTokenAuthentication","text":"<pre><code>func RequireTokenAuthentication(h http.Handler) http.Handler\n</code></pre> <p>RequireTokenAuthentication enforces authentication token from requests</p> <p>Generated by gomarkdoc</p>"},{"location":"api/packages/model.html","title":"Model","text":""},{"location":"api/packages/model.html#model","title":"model","text":"<pre><code>import \"budget-tracker-api-v2/internal/model\"\n</code></pre>"},{"location":"api/packages/model.html#index","title":"Index","text":"<ul> <li>type Balance</li> <li>type BalanceInfo</li> <li>type Card</li> <li>type JWTResponse</li> <li>type JWTUser</li> <li>type PaymentMethod</li> <li>type Transaction</li> <li>type User</li> </ul>"},{"location":"api/packages/model.html#type-balance","title":"type Balance","text":"<pre><code>type Balance struct {\n    ID           primitive.ObjectID `json:\"id,omitempty\" bson:\"_id,omitempty\"`\n    OwnerID      primitive.ObjectID `json:\"owner_id,omitempty\" bson:\"owner_id,omitempty\"`\n    Balance      BalanceInfo        `json:\"balance\" bson:\"balance\"`\n    BalanceMonth time.Month         `json:\"month,omitempty\" bson:\"month,omitempty\"`\n    BalanceYear  int                `json:\"year,omitempty\" bson:\"year,omitempty\"`\n    Transactions []*Transaction     `json:\"transactions,omitempty\" bson:\"transactions,omitempty\"`\n    // example: 2025-09-21T20:58:16.53Z\n    CreatedAt primitive.DateTime `json:\"created_at,omitempty\" bson:\"created_at,omitempty\"`\n}\n</code></pre>"},{"location":"api/packages/model.html#type-balanceinfo","title":"type BalanceInfo","text":"<pre><code>type BalanceInfo struct {\n    Total    float32\n    Currency string\n}\n</code></pre>"},{"location":"api/packages/model.html#type-card","title":"type Card","text":"<p>Card defines a user credit card swagger:model</p> <pre><code>type Card struct {\n    ID         primitive.ObjectID `json:\"id,omitempty\" bson:\"_id,omitempty\"`\n    OwnerID    primitive.ObjectID `json:\"owner_id,omitempty\" bson:\"owner_id,omitempty\"`\n    Alias      string             `json:\"alias\" bson:\"alias\"`\n    Type       string             `json:\"type\" bson:\"type\"`\n    Network    string             `json:\"network\" bson:\"network\"`\n    Bank       string             `json:\"bank\" bson:\"bank\"`\n    Color      string             `json:\"color\" bson:\"color\"`\n    LastDigits int32              `json:\"last_digits\" bson:\"last_digits\"`\n    CreatedAt  primitive.DateTime `json:\"created_at,omitempty\" bson:\"created_at,omitempty\" swaggerignore:\"true\"`\n}\n</code></pre> <p></p>"},{"location":"api/packages/model.html#type-jwtresponse","title":"type JWTResponse","text":"<p>JWTResponse returns as HTTP response the user details (to be used along with the generated JWT token)</p> <pre><code>type JWTResponse struct {\n    Type         string `json:\"type\"`\n    RefreshToken string `json:\"refresh\"`\n    AccessToken  string `json:\"token\"`\n}\n</code></pre> <p></p>"},{"location":"api/packages/model.html#type-jwtuser","title":"type JWTUser","text":"<p>JWTUSer defines a minimum set of user for posterior authentication</p> <pre><code>type JWTUser struct {\n    // ID primitive.ObjectID `json:\"id,omitempty\" bson:\"_id,omitempty\"`\n    // example: vsantos\n    Login string `json:\"login\" bson:\"login\"`\n    // example: myplaintextpassword\n    Password string `json:\"password\" bson:\"password\"`\n}\n</code></pre> <p></p>"},{"location":"api/packages/model.html#type-paymentmethod","title":"type PaymentMethod","text":"<p>PaymentMethod defines which payment method was used for a certain transaction</p> <pre><code>type PaymentMethod struct {\n    Credit      Card `json:\"credit\" bson:\"credit\"`\n    Debit       Card `json:\"debit\" bson:\"debit\"`\n    Pix         bool `json:\"pix,omitempty\" bson:\"pix,omitempty\"`\n    PaymentSlip bool `json:\"payment_slip,omitempty\" bson:\"payment_slip,omitempty\"`\n}\n</code></pre> <p></p>"},{"location":"api/packages/model.html#type-transaction","title":"type Transaction","text":"<p>Transaction defines a user transaction to be added to a posterior Balance</p> <pre><code>type Transaction struct {\n    // swagger:ignore\n    ID        primitive.ObjectID `json:\"id,omitempty\" bson:\"_id,omitempty\"`\n    BalanceID primitive.ObjectID `json:\"balance_id,omitempty\" bson:\"balance_id,omitempty\"`\n    OwnerID   primitive.ObjectID `json:\"owner_id,omitempty\" bson:\"owner_id,omitempty\"`\n    // example: income/expense\n    Type string `json:\"type\" bson:\"type\"`\n    // example: guitar lessons\n    Description string `json:\"description\" bson:\"description\"`\n    // example: 12.90\n    Amount float64 `json:\"amount\" bson:\"amount\"`\n    // example: BRL\n    Currency string `json:\"currency\" bson:\"currency\"`\n    // example: Credit\n    PaymentMethod PaymentMethod `json:\"payment_method\" bson:\"payment_method\"`\n    // example: 2025-09-16T17:33:10.64Z\n    TransactionDate primitive.DateTime `json:\"transaction_date,omitempty\" bson:\"transaction_date,omitempty\"`\n    // example: \"categories\": [\"personal development\"]\n    Categories []string `json:\"categories,omitempty\" bson:\"categories,omitempty\"`\n    // example: 2025-09-21T20:58:16.53Z\n    CreatedAt primitive.DateTime `json:\"created_at,omitempty\" bson:\"created_at,omitempty\"`\n}\n</code></pre> <p></p>"},{"location":"api/packages/model.html#type-user","title":"type User","text":"<p>User defines a user struct</p> <pre><code>type User struct {\n    // swagger:ignore\n    ID  primitive.ObjectID `json:\"id,omitempty\" bson:\"_id,omitempty\"`\n    // example: vsantos\n    Login string `json:\"login\" bson:\"login\"`\n    // example: Victor\n    Firstname string `json:\"firstname,omitempty\" bson:\"firstname,omitempty\"`\n    // example: Santos\n    Lastname string `json:\"lastname,omitempty\" bson:\"lastname,omitempty\"`\n    // example: vsantos.py@gmail.com\n    Email string `json:\"email,omitempty\" bson:\"email,omitempty\"`\n    // example: myplaintextpassword\n    Password string `json:\"password,omitempty\" bson:\"salted_password,omitempty\"`\n    // swagger:ignore\n    CreatedAt primitive.DateTime `json:\"created_at,omitempty\" bson:\"created_at,omitempty\"`\n}\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"api/packages/mongodb.html","title":"MongoDB","text":""},{"location":"api/packages/mongodb.html#mongodb","title":"mongodb","text":"<pre><code>import \"budget-tracker-api-v2/internal/repository/mongodb\"\n</code></pre>"},{"location":"api/packages/mongodb.html#index","title":"Index","text":"<ul> <li>func NewCardRepository(ctx context.Context, tracer trace.Tracer, c repository.CardCollectionInterface) (repository.CardRepoInterface, error)</li> <li>func NewClient() (*mongo.Client, error)</li> <li>func NewUserRepository(ctx context.Context, tracer trace.Tracer, c repository.UserCollectionInterface) (repository.UserRepoInterface, error)</li> <li>type CardCollectionConfig</li> <li>func (c *CardCollectionConfig) CreateIndexes(ctx context.Context, indexes []string) error</li> <li>func (c *CardCollectionConfig) DeleteOne(ctx context.Context, id string) (int64, error)</li> <li>func (c *CardCollectionConfig) FindOne(ctx context.Context, id string) (*model.Card, error)</li> <li>func (c *CardCollectionConfig) InsertOne(ctx context.Context, document interface{}) (id string, err error)</li> <li>type CardMockCollectionConfig</li> <li>func (c *CardMockCollectionConfig) CreateIndexes(ctx context.Context, indexes []string) error</li> <li>func (c *CardMockCollectionConfig) DeleteOne(ctx context.Context, id string) (int64, error)</li> <li>func (c *CardMockCollectionConfig) FindOne(ctx context.Context, id string) (*model.Card, error)</li> <li>func (c *CardMockCollectionConfig) InsertOne(ctx context.Context, document interface{}) (id string, err error)</li> <li>type HealthCollectionConfig</li> <li>func (c *HealthCollectionConfig) Ping(ctx context.Context) (healthy bool, err error)</li> <li>type MongoCardRepository</li> <li>func (r *MongoCardRepository) Delete(ctx context.Context, empID string) (int64, error)</li> <li>func (r *MongoCardRepository) FindByID(ctx context.Context, empID string) (*model.Card, error)</li> <li>func (r *MongoCardRepository) Insert(ctx context.Context, emp *model.Card) (*model.Card, error)</li> <li>type MongoHealthRepository</li> <li>type MongoUserRepository</li> <li>func (r *MongoUserRepository) Delete(ctx context.Context, empID string) (int64, error)</li> <li>func (r *MongoUserRepository) FindByID(ctx context.Context, empID string) (*model.User, error)</li> <li>func (r *MongoUserRepository) Insert(ctx context.Context, emp *model.User) (*model.User, error)</li> <li>type UserCollectionConfig</li> <li>func (c *UserCollectionConfig) CreateIndexes(ctx context.Context, indexes []string) error</li> <li>func (c *UserCollectionConfig) DeleteOne(ctx context.Context, id string) (int64, error)</li> <li>func (c *UserCollectionConfig) FindOne(ctx context.Context, id string) (*model.User, error)</li> <li>func (c *UserCollectionConfig) FindOneBy(ctx context.Context, login string) (*model.User, error)</li> <li>func (c *UserCollectionConfig) InsertOne(ctx context.Context, document interface{}) (id string, err error)</li> <li>type UserCollectionInterface</li> <li>type UserMockCollectionConfig</li> <li>func (c *UserMockCollectionConfig) CreateIndexes(ctx context.Context, indexes []string) error</li> <li>func (c *UserMockCollectionConfig) DeleteOne(ctx context.Context, id string) (int64, error)</li> <li>func (c *UserMockCollectionConfig) FindOne(ctx context.Context, id string) (*model.User, error)</li> <li>func (c *UserMockCollectionConfig) FindOneBy(ctx context.Context, login string) (*model.User, error)</li> <li>func (c *UserMockCollectionConfig) InsertOne(ctx context.Context, document interface{}) (id string, err error)</li> </ul>"},{"location":"api/packages/mongodb.html#func-newcardrepository","title":"func NewCardRepository","text":"<pre><code>func NewCardRepository(ctx context.Context, tracer trace.Tracer, c repository.CardCollectionInterface) (repository.CardRepoInterface, error)\n</code></pre> <p>NewCardRepository will return an CardRepoInterface for mongodb</p> <p></p>"},{"location":"api/packages/mongodb.html#func-newclient","title":"func NewClient","text":"<pre><code>func NewClient() (*mongo.Client, error)\n</code></pre> <p>NewClient will return a valid mongoDB connection</p> <p></p>"},{"location":"api/packages/mongodb.html#func-newuserrepository","title":"func NewUserRepository","text":"<pre><code>func NewUserRepository(ctx context.Context, tracer trace.Tracer, c repository.UserCollectionInterface) (repository.UserRepoInterface, error)\n</code></pre> <p>NewUserRepository will return an UserRepoInterface for mongodb</p> <p></p>"},{"location":"api/packages/mongodb.html#type-cardcollectionconfig","title":"type CardCollectionConfig","text":"<p>CardCollectionConfig will implement mongodb collection functions</p> <pre><code>type CardCollectionConfig struct {\n    Tracer          trace.Tracer\n    MongoCollection *mongo.Collection\n}\n</code></pre> <p></p>"},{"location":"api/packages/mongodb.html#func-cardcollectionconfig-createindexes","title":"func (*CardCollectionConfig) CreateIndexes","text":"<pre><code>func (c *CardCollectionConfig) CreateIndexes(ctx context.Context, indexes []string) error\n</code></pre> <p>CreateIndexes will create mongodb indexes</p> <p></p>"},{"location":"api/packages/mongodb.html#func-cardcollectionconfig-deleteone","title":"func (*CardCollectionConfig) DeleteOne","text":"<pre><code>func (c *CardCollectionConfig) DeleteOne(ctx context.Context, id string) (int64, error)\n</code></pre> <p>DeleteOne will find a Card from collection</p> <p></p>"},{"location":"api/packages/mongodb.html#func-cardcollectionconfig-findone","title":"func (*CardCollectionConfig) FindOne","text":"<pre><code>func (c *CardCollectionConfig) FindOne(ctx context.Context, id string) (*model.Card, error)\n</code></pre> <p>FindOne will find a Card from collection</p> <p></p>"},{"location":"api/packages/mongodb.html#func-cardcollectionconfig-insertone","title":"func (*CardCollectionConfig) InsertOne","text":"<pre><code>func (c *CardCollectionConfig) InsertOne(ctx context.Context, document interface{}) (id string, err error)\n</code></pre> <p>InsertOne will insert a document into mongodb</p> <p></p>"},{"location":"api/packages/mongodb.html#type-cardmockcollectionconfig","title":"type CardMockCollectionConfig","text":"<p>CardMockCollectionConfig will implement mongodb collection functions</p> <pre><code>type CardMockCollectionConfig struct {\n    Error error\n}\n</code></pre> <p></p>"},{"location":"api/packages/mongodb.html#func-cardmockcollectionconfig-createindexes","title":"func (*CardMockCollectionConfig) CreateIndexes","text":"<pre><code>func (c *CardMockCollectionConfig) CreateIndexes(ctx context.Context, indexes []string) error\n</code></pre> <p>CreateIndexes will create mongodb indexes</p> <p></p>"},{"location":"api/packages/mongodb.html#func-cardmockcollectionconfig-deleteone","title":"func (*CardMockCollectionConfig) DeleteOne","text":"<pre><code>func (c *CardMockCollectionConfig) DeleteOne(ctx context.Context, id string) (int64, error)\n</code></pre> <p>DeleteOne will insert a document into mongodb</p> <p></p>"},{"location":"api/packages/mongodb.html#func-cardmockcollectionconfig-findone","title":"func (*CardMockCollectionConfig) FindOne","text":"<pre><code>func (c *CardMockCollectionConfig) FindOne(ctx context.Context, id string) (*model.Card, error)\n</code></pre> <p>FindOne will insert a document into mongodb</p> <p></p>"},{"location":"api/packages/mongodb.html#func-cardmockcollectionconfig-insertone","title":"func (*CardMockCollectionConfig) InsertOne","text":"<pre><code>func (c *CardMockCollectionConfig) InsertOne(ctx context.Context, document interface{}) (id string, err error)\n</code></pre> <p>InsertOne will insert a document into mongodb</p> <p></p>"},{"location":"api/packages/mongodb.html#type-healthcollectionconfig","title":"type HealthCollectionConfig","text":"<p>HealthCollectionConfig will implement mongodb collection functions for healthchecks</p> <pre><code>type HealthCollectionConfig struct {\n    Tracer          trace.Tracer\n    MongoCollection *mongo.Collection\n}\n</code></pre> <p></p>"},{"location":"api/packages/mongodb.html#func-healthcollectionconfig-ping","title":"func (*HealthCollectionConfig) Ping","text":"<pre><code>func (c *HealthCollectionConfig) Ping(ctx context.Context) (healthy bool, err error)\n</code></pre>"},{"location":"api/packages/mongodb.html#type-mongocardrepository","title":"type MongoCardRepository","text":"<p>MongoCardRepository defines a Repository for Card model</p> <pre><code>type MongoCardRepository struct {\n    Tracer          trace.Tracer\n    MongoCollection repository.CardCollectionInterface\n}\n</code></pre> <p></p>"},{"location":"api/packages/mongodb.html#func-mongocardrepository-delete","title":"func (*MongoCardRepository) Delete","text":"<pre><code>func (r *MongoCardRepository) Delete(ctx context.Context, empID string) (int64, error)\n</code></pre> <p>Delete will delete an card based on its ID</p> <p></p>"},{"location":"api/packages/mongodb.html#func-mongocardrepository-findbyid","title":"func (*MongoCardRepository) FindByID","text":"<pre><code>func (r *MongoCardRepository) FindByID(ctx context.Context, empID string) (*model.Card, error)\n</code></pre> <p>FindByID will fetch an card based on its ID</p> <p></p>"},{"location":"api/packages/mongodb.html#func-mongocardrepository-insert","title":"func (*MongoCardRepository) Insert","text":"<pre><code>func (r *MongoCardRepository) Insert(ctx context.Context, emp *model.Card) (*model.Card, error)\n</code></pre> <p>Insert will insert an card</p> <p></p>"},{"location":"api/packages/mongodb.html#type-mongohealthrepository","title":"type MongoHealthRepository","text":"<p>MongoHealthRepository defines a Repository for User model</p> <pre><code>type MongoHealthRepository struct {\n    MongoCollection repository.HealthCollectionInterface\n}\n</code></pre> <p></p>"},{"location":"api/packages/mongodb.html#type-mongouserrepository","title":"type MongoUserRepository","text":"<p>MongoUserRepository defines a Repository for User model</p> <pre><code>type MongoUserRepository struct {\n    MongoCollection repository.UserCollectionInterface\n}\n</code></pre> <p></p>"},{"location":"api/packages/mongodb.html#func-mongouserrepository-delete","title":"func (*MongoUserRepository) Delete","text":"<pre><code>func (r *MongoUserRepository) Delete(ctx context.Context, empID string) (int64, error)\n</code></pre> <p>Delete will delete an user based on its ID</p> <p></p>"},{"location":"api/packages/mongodb.html#func-mongouserrepository-findbyid","title":"func (*MongoUserRepository) FindByID","text":"<pre><code>func (r *MongoUserRepository) FindByID(ctx context.Context, empID string) (*model.User, error)\n</code></pre> <p>FindByID will fetch an user based on its ID</p> <p></p>"},{"location":"api/packages/mongodb.html#func-mongouserrepository-insert","title":"func (*MongoUserRepository) Insert","text":"<pre><code>func (r *MongoUserRepository) Insert(ctx context.Context, emp *model.User) (*model.User, error)\n</code></pre> <p>Insert will insert an user</p> <p></p>"},{"location":"api/packages/mongodb.html#type-usercollectionconfig","title":"type UserCollectionConfig","text":"<p>UserCollectionConfig will implement mongodb collection functions</p> <pre><code>type UserCollectionConfig struct {\n    Tracer          trace.Tracer\n    MongoCollection *mongo.Collection\n}\n</code></pre> <p></p>"},{"location":"api/packages/mongodb.html#func-usercollectionconfig-createindexes","title":"func (*UserCollectionConfig) CreateIndexes","text":"<pre><code>func (c *UserCollectionConfig) CreateIndexes(ctx context.Context, indexes []string) error\n</code></pre> <p>CreateIndexes will create mongodb indexes</p> <p></p>"},{"location":"api/packages/mongodb.html#func-usercollectionconfig-deleteone","title":"func (*UserCollectionConfig) DeleteOne","text":"<pre><code>func (c *UserCollectionConfig) DeleteOne(ctx context.Context, id string) (int64, error)\n</code></pre> <p>DeleteOne will find a User from collection</p> <p></p>"},{"location":"api/packages/mongodb.html#func-usercollectionconfig-findone","title":"func (*UserCollectionConfig) FindOne","text":"<pre><code>func (c *UserCollectionConfig) FindOne(ctx context.Context, id string) (*model.User, error)\n</code></pre> <p>FindOne will find a User from collection</p> <p></p>"},{"location":"api/packages/mongodb.html#func-usercollectionconfig-findoneby","title":"func (*UserCollectionConfig) FindOneBy","text":"<pre><code>func (c *UserCollectionConfig) FindOneBy(ctx context.Context, login string) (*model.User, error)\n</code></pre> <p>FindOne will find a User from collection</p> <p></p>"},{"location":"api/packages/mongodb.html#func-usercollectionconfig-insertone","title":"func (*UserCollectionConfig) InsertOne","text":"<pre><code>func (c *UserCollectionConfig) InsertOne(ctx context.Context, document interface{}) (id string, err error)\n</code></pre> <p>InsertOne will insert a document into mongodb</p> <p></p>"},{"location":"api/packages/mongodb.html#type-usercollectioninterface","title":"type UserCollectionInterface","text":"<p>UserCollectionInterface defines a mongodb collection API to be posteriorly mocked</p> <pre><code>type UserCollectionInterface interface {\n    CreateIndexes(ctx context.Context, indexes []string) error\n    InsertOne(ctx context.Context, document interface{}) (id string, err error)\n    FindOne(ctx context.Context, id string) (*model.User, error)\n    FindOneBy(ctx context.Context, xd string) (*model.User, error)\n    DeleteOne(ctx context.Context, id string) (int64, error)\n}\n</code></pre> <p></p>"},{"location":"api/packages/mongodb.html#type-usermockcollectionconfig","title":"type UserMockCollectionConfig","text":"<p>UserMockCollectionConfig will implement mongodb collection functions</p> <pre><code>type UserMockCollectionConfig struct {\n    Error error\n}\n</code></pre> <p></p>"},{"location":"api/packages/mongodb.html#func-usermockcollectionconfig-createindexes","title":"func (*UserMockCollectionConfig) CreateIndexes","text":"<pre><code>func (c *UserMockCollectionConfig) CreateIndexes(ctx context.Context, indexes []string) error\n</code></pre> <p>CreateIndexes will create mongodb indexes</p> <p></p>"},{"location":"api/packages/mongodb.html#func-usermockcollectionconfig-deleteone","title":"func (*UserMockCollectionConfig) DeleteOne","text":"<pre><code>func (c *UserMockCollectionConfig) DeleteOne(ctx context.Context, id string) (int64, error)\n</code></pre> <p>DeleteOne will insert a document into mongodb</p> <p></p>"},{"location":"api/packages/mongodb.html#func-usermockcollectionconfig-findone","title":"func (*UserMockCollectionConfig) FindOne","text":"<pre><code>func (c *UserMockCollectionConfig) FindOne(ctx context.Context, id string) (*model.User, error)\n</code></pre> <p>FindOne will find a document based on ID</p> <p></p>"},{"location":"api/packages/mongodb.html#func-usermockcollectionconfig-findoneby","title":"func (*UserMockCollectionConfig) FindOneBy","text":"<pre><code>func (c *UserMockCollectionConfig) FindOneBy(ctx context.Context, login string) (*model.User, error)\n</code></pre> <p>FindOneBy will find a document based on field</p> <p></p>"},{"location":"api/packages/mongodb.html#func-usermockcollectionconfig-insertone","title":"func (*UserMockCollectionConfig) InsertOne","text":"<pre><code>func (c *UserMockCollectionConfig) InsertOne(ctx context.Context, document interface{}) (id string, err error)\n</code></pre> <p>InsertOne will insert a document into mongodb</p> <p>Generated by gomarkdoc</p>"},{"location":"api/packages/observability.html","title":"Observability","text":""},{"location":"api/packages/observability.html#observability","title":"observability","text":"<pre><code>import \"budget-tracker-api-v2/internal/observability\"\n</code></pre>"},{"location":"api/packages/observability.html#index","title":"Index","text":"<ul> <li>func InitTracer(ctx context.Context) func(context.Context) error</li> <li>type DefaultTracerProvider</li> <li>func (d *DefaultTracerProvider) Tracer(name string) trace.Tracer</li> <li>type TracerProvider</li> </ul>"},{"location":"api/packages/observability.html#func-inittracer","title":"func InitTracer","text":"<pre><code>func InitTracer(ctx context.Context) func(context.Context) error\n</code></pre> <p>InitTracer will init Tracer globally</p> <p></p>"},{"location":"api/packages/observability.html#type-defaulttracerprovider","title":"type DefaultTracerProvider","text":"<pre><code>type DefaultTracerProvider struct{}\n</code></pre>"},{"location":"api/packages/observability.html#func-defaulttracerprovider-tracer","title":"func (*DefaultTracerProvider) Tracer","text":"<pre><code>func (d *DefaultTracerProvider) Tracer(name string) trace.Tracer\n</code></pre>"},{"location":"api/packages/observability.html#type-tracerprovider","title":"type TracerProvider","text":"<pre><code>type TracerProvider interface {\n    Tracer(name string) trace.Tracer\n}\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"api/packages/repository.html","title":"Repository","text":""},{"location":"api/packages/repository.html#repository","title":"repository","text":"<pre><code>import \"budget-tracker-api-v2/internal/repository\"\n</code></pre>"},{"location":"api/packages/repository.html#index","title":"Index","text":"<ul> <li>type CardCollectionInterface</li> <li>type CardRepoInterface</li> <li>type HealthCollectionInterface</li> <li>type UserCollectionInterface</li> <li>type UserRepoInterface</li> </ul>"},{"location":"api/packages/repository.html#type-cardcollectioninterface","title":"type CardCollectionInterface","text":"<p>CardCollectionInterface defines a mongodb collection API to be posteriorly mocked</p> <pre><code>type CardCollectionInterface interface {\n    CreateIndexes(ctx context.Context, indexes []string) error\n    InsertOne(ctx context.Context, document interface{}) (id string, err error)\n    FindOne(ctx context.Context, id string) (*model.Card, error)\n    DeleteOne(ctx context.Context, id string) (int64, error)\n}\n</code></pre> <p></p>"},{"location":"api/packages/repository.html#type-cardrepointerface","title":"type CardRepoInterface","text":"<p>CardRepoInterface defines Card CRUD operations</p> <pre><code>type CardRepoInterface interface {\n    Insert(ctx context.Context, emp *model.Card) (*model.Card, error)\n    FindByID(ctx context.Context, empID string) (*model.Card, error)\n    Delete(ctx context.Context, id string) (int64, error)\n}\n</code></pre> <p></p>"},{"location":"api/packages/repository.html#type-healthcollectioninterface","title":"type HealthCollectionInterface","text":"<p>UserCollectionInterface defines a mongodb collection API to be posteriorly mocked</p> <pre><code>type HealthCollectionInterface interface {\n    Ping(ctx context.Context) (bool, error)\n}\n</code></pre> <p></p>"},{"location":"api/packages/repository.html#type-usercollectioninterface","title":"type UserCollectionInterface","text":"<p>UserCollectionInterface defines a mongodb collection API to be posteriorly mocked</p> <pre><code>type UserCollectionInterface interface {\n    CreateIndexes(ctx context.Context, indexes []string) error\n    InsertOne(ctx context.Context, document interface{}) (id string, err error)\n    FindOne(ctx context.Context, id string) (*model.User, error)\n    FindOneBy(ctx context.Context, login string) (*model.User, error)\n    DeleteOne(ctx context.Context, id string) (int64, error)\n}\n</code></pre> <p></p>"},{"location":"api/packages/repository.html#type-userrepointerface","title":"type UserRepoInterface","text":"<p>UserRepoInterface defines User CRUD operations</p> <pre><code>type UserRepoInterface interface {\n    Insert(ctx context.Context, emp *model.User) (*model.User, error)\n    FindByID(ctx context.Context, empID string) (*model.User, error)\n    Delete(ctx context.Context, id string) (int64, error)\n}\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"api/packages/router.html","title":"Router","text":""},{"location":"api/packages/router.html#router","title":"router","text":"<pre><code>import \"budget-tracker-api-v2/internal/http/router\"\n</code></pre>"},{"location":"api/packages/router.html#index","title":"Index","text":"<ul> <li>func NewRouter(tracer trace.Tracer, userCollectionInterface repository.UserCollectionInterface, cardsCollectionInterface repository.CardCollectionInterface, healthCollectionInterface repository.HealthCollectionInterface) (*mux.Router, error)</li> </ul>"},{"location":"api/packages/router.html#func-newrouter","title":"func NewRouter","text":"<pre><code>func NewRouter(tracer trace.Tracer, userCollectionInterface repository.UserCollectionInterface, cardsCollectionInterface repository.CardCollectionInterface, healthCollectionInterface repository.HealthCollectionInterface) (*mux.Router, error)\n</code></pre> <p>NewRouter will set new User Routes</p> <p>Generated by gomarkdoc</p>"},{"location":"development/local_development.html","title":"Getting started","text":""},{"location":"development/local_development.html#getting-started","title":"Getting started","text":"<p>This guide will help you to: build, run and observe <code>budget-tracker-api</code> locally for development purposes.</p>"},{"location":"development/local_development.html#requisites","title":"Requisites","text":"<ul> <li> Operational System<ul> <li> Linux</li> <li> Unix (MacOS)</li> <li> Windows</li> </ul> </li> <li> Binaries and requisites needed<ul> <li> Docker Desktop / Rancher Desktop</li> <li> <code>docker</code> and <code>docker-compose</code> binaries</li> <li> git</li> <li> Python 3.x </li> <li> Golang 1.25+</li> <li> mike (for publishing versioned docs)</li> </ul> </li> <li> External requisites<ul> <li> MongoDB Atlas database - (Optional)</li> <li> Github - for Github actions usage</li> </ul> </li> </ul>"},{"location":"development/local_development.html#fetching-the-code","title":"Fetching the code","text":"<p>First things first, ensure you have the latest code-base fetched:</p> <pre><code># Feel free to use SSH instead of HTTPS\ngit clone https://github.com/vsantos/budget-tracker-api-v2\n</code></pre> <p>This command will create a local directory called <code>budget-tracker-api-v2</code> with the source code within.</p>"},{"location":"development/local_development.html#running-the-code-locally","title":"Running the code locally","text":"<p>In this section, let's explore how you can run the platform locally with or without using container images.</p>"},{"location":"development/local_development.html#without-containers","title":"Without containers","text":"<p>If you don't have/want any container engines running the app, you can build and run the platform by following these steps:</p> ShellShell outcome <pre><code>cd budget-tracker-api-v2\n\n# Ensure you have successfully `cd`ed to the correct directory by running:\npwd\n</code></pre> <pre><code>/Users/${my-user}/Code/budget-tracker-api-v2\n</code></pre> ShellShell outocome <pre><code>ls\n</code></pre> <pre><code>CHECKLIST.md            Dockerfile          go.sum              LICENSE             otel-collector-config.yaml  swagger\ndocker              docs                hack                main.go             README.md\ndocker-compose.yml      go.mod              internal            Makefile            sonar-project.properties\n</code></pre>"},{"location":"development/local_development.html#building-and-running-your-app","title":"building and running your app","text":"<p>Since our app was written in <code>go</code>, we will use the binary to compile the locally:</p> Shell <pre><code># Install the needed dependencies:\ngo mod tidy\n\n# Build the binary\ngo build . -o budget-tracker\n</code></pre> <p>This command - if successful - will generate a local binary called <code>budget-tracker</code>.</p> <p>Now, you can simply run it:</p> Shell <pre><code># This command will make your binary \"runnable\"\nchmod +x budget-tracker\n\n# Finally, run the binary\n./budget-tracker-api\n</code></pre> <p>Ops! The app wasn't able to run, according to it's message</p> <pre><code>{\n    \"level\":\"fatal\",\n    \"msg\":\"empty MONGODB_HOST, MONGODB_USER or MONGODB_PASS env vars for mongodb\",\n    \"time\":\"2025-10-13T13:24:46-03:00\"\n}\n</code></pre> <p>The only external dependency for this application is a MongoDB database, as shown on the architecture page. This means we need to provide a functional MongoDB instance to the application\u2014either locally (e.g., through a container) or externally (e.g., via Atlas).</p>"},{"location":"development/local_development.html#setting-up-an-external-mongodb","title":"Setting up an external MongoDB","text":"<p>If you don't want to run a local MongoDB instance, you can use Atlas' one since they offer a free-tier. You will endup having a mongodb instance along with credentials, make sure you are able to access before you pointing the app to it.</p> <p></p> <p>You can achieve this goal by either running MongoDB Compass or MongoDB CLI <code>mongosh</code>.</p> <p>If you try to pass a fake host or a non-existent MongoDB URL, the app will fail to start.</p> <p>Here\u2019s an example of a functional command that passes environment variables:</p> <pre><code># This command will pass environment variables directly\n## to your application's process\n\nMONGODB_HOST=\"mongodb+srv://my-mongodb-atlas-url.mongodb.net\" \\\nMONGODB_USER=\"user\" \\\nMONGODB_PASS=\"pass\" \\\n./budget-tracker-api\n</code></pre> <p>You could also export these variables globally but for simplicity we are not using this option for now:</p> Shell <pre><code>export MONGODB_HOST=\"mongodb+srv://my-mongodb-atlas-url.mongodb.net\" \\\nexport MONGODB_USER=\"user\" \\\nexport MONGODB_PASS=\"pass\"\n</code></pre> Shell <pre><code>./budget-tracker-api\n</code></pre>"},{"location":"development/local_development.html#dealing-with-mongodbs-dependency","title":"Dealing with MongoDB's dependency","text":"<p>Let\u2019s take this chance (if you haven\u2019t set up your MongoDB Atlas instance yet) to grab your credentials from Atlas and run the app for the first time. Just replace the environment variable values in your command:</p> Shell <pre><code>MONGODB_HOST=\"mongodb+srv://my-example.fj2qq.mongodb.net/\" \\\nMONGODB_USER=\"my-user\" \\\nMONGODB_PASS=\"my-pass\" \\\n./budget-tracker-api\n</code></pre> <p>You should expect then the following outcome</p> <pre><code>{\"level\":\"info\",\"msg\":\"Server running on :8080\",\"time\":\"2025-10-13T13:42:04-03:00\"}\n</code></pre> <p>Now, we can simply test it locally by running a simple <code>curl</code> command:</p> Shell <pre><code># According to the app logs, the platform is running under port `8080`\n## According to the swagger, we can check there is a `/health` endpoint\n\ncurl http://localhost:8080/health\n</code></pre> <p>This is the expected outcome</p> <pre><code>{\n    \"message\": \"healthy\",\n    \"app\": true,\n    \"database\": true\n}\n</code></pre> <p>This means we made a request to our app, which validated if it's connection with MongoDB is working properly. This endpoint is particularly useful when you have High-Availability mechanisms such as Kubernetes' healthcheck.</p>"},{"location":"development/local_development.html#with-containers","title":"With containers","text":"<p>You can simply (at the root of your directory) trigger the <code>docker-compose</code> manually or through the <code>Makefile</code> command <code>make rebuild</code>:</p> <p>Make sure you edit the file <code>docker-compose</code> at the root of your directory to make sure to pass mongodb's credentials:</p> docker-compose.yml <pre><code>  budger-tracker-api-v2:\n    build: ./\n    container_name: budger-tracker-api-v2\n    environment:\n      MONGODB_HOST: \"mongodb+srv://&lt;REPLACE_ME&gt;/\"\n      MONGODB_USER: \"&lt;REPLACE_ME&gt;\"\n      MONGODB_PASS: \"&lt;REPLACE_ME&gt;\"\n</code></pre> <p>don't persist your credentials to git</p> <p>This file is ignored by <code>.gitconfig</code> so if you accidentally save those credentails, no changes will be known by your <code>git</code> process.</p> ShellShell outcome <pre><code># Manually bootstrapping all containers at once in background:\ndocker-compose up -d\n\n# through Makefile. Prefered over the \"manual docker-compose\" to allow faster\n## local development interactions \nmake rebuild\n</code></pre> <pre><code>[+] Running 4/4\n\u2714 Network budget-tracker-api-v2_otel-network  Created                                                  0.0s \n\u2714 Container jaeger                            Started                                                  0.2s \n\u2714 Container otel-collector                    Started                                                  0.3s \n\u2714 Container budger-tracker-api-v2             Started                                                  0.3s\n</code></pre> <p>All regular containers - including observability ones - will be up and running except MongoDB's container.</p> <p>We can use the same approach as running \"without containers\" to validate app's health:</p> Shell <pre><code># According to the app logs, the platform is running under port `8080`\n## According to the swagger, we can check there is a `/health` endpoint\n\ncurl http://localhost:8080/health\n</code></pre> <p>This is the expected outcome</p> <pre><code>{\n    \"message\": \"healthy\",\n    \"app\": true,\n    \"database\": true\n}\n</code></pre>"},{"location":"development/local_development.html#dealing-with-mongodbs-dependency_1","title":"Dealing with MongoDB's dependency","text":"<p>If you won't want to deal with an external mongoDB but to test with a local one instead. We will be missing the details step-by-step for now but you can simply create a local mongoDB and point the correct <code>localhost:27017</code>:</p> docker-compose.yml <pre><code>  budger-tracker-api-v2:\n    build: ./\n    container_name: budger-tracker-api-v2\n    environment:\n      MONGODB_HOST: \"mongodb+srv://localhost:27017/\"\n      MONGODB_USER: \"&lt;REPLACE_ME&gt;\"\n      MONGODB_PASS: \"&lt;REPLACE_ME&gt;\"\n</code></pre>"},{"location":"development/local/requisites.html","title":"Requisites","text":""},{"location":"development/local/requisites.html#getting-started","title":"Getting started","text":"<p>This guide will help you to: build, run and observe <code>budget-tracker-api</code> locally for development purposes.</p>"},{"location":"development/local/requisites.html#requisites","title":"Requisites","text":"<ul> <li> Operational System<ul> <li> Linux</li> <li> Unix (MacOS)</li> <li> Windows</li> </ul> </li> <li> Binaries and requisites needed<ul> <li> Docker Desktop / Rancher Desktop</li> <li> <code>docker</code> and <code>docker-compose</code> binaries</li> <li> make (for <code>Makefile</code> usage)</li> <li> git</li> <li> Python 3.x</li> <li> Golang 1.25+</li> </ul> </li> <li> External requisites<ul> <li> MongoDB Atlas database - (Optional)</li> <li> Github - for Github actions usage</li> </ul> </li> </ul>"},{"location":"development/local/requisites.html#fetching-the-code","title":"Fetching the code","text":"<p>First things first, ensure you have the latest code-base fetched:</p> <pre><code># Feel free to use SSH instead of HTTPS\ngit clone https://github.com/vsantos/budget-tracker-api-v2\n</code></pre> <p>This command will create a local directory called <code>budget-tracker-api-v2</code> with the source code within.</p>"},{"location":"development/local/requisites.html#setting-up-an-external-mongodb","title":"Setting up an external MongoDB","text":"<p>If you don't want to run a local MongoDB instance, you can use Atlas' one since they offer a free-tier. You will endup having a mongodb instance along with credentials, make sure you are able to access before you pointing the app to it.</p> <p></p> <p>You can achieve this goal by either running MongoDB Compass or MongoDB CLI <code>mongosh</code>.</p>"},{"location":"development/local/run_with_containers.html","title":"Running with containers","text":""},{"location":"development/local/run_with_containers.html#running-the-code-locally","title":"Running the code locally","text":"<p>In this section, let's explore how you can run the platform locally using container images.</p> <p>Running with or without containers?</p> <p>My personal preference is to always work with containers for everything. My advice is to go through the documentation on \u201crunning without containers,\u201d but in the end, stick with using containers.</p>"},{"location":"development/local/run_with_containers.html#with-containers","title":"With containers","text":"<p>You can simply (at the root of your directory) trigger the <code>docker-compose</code> manually or through the <code>Makefile</code> command <code>make rebuild</code>:</p> <p>Make sure you edit the file <code>docker-compose</code> at the root of your directory to make sure to pass mongodb's credentials:</p> docker-compose.yml <pre><code>  budger-tracker-api-v2:\n    build: ./\n    container_name: budger-tracker-api-v2\n    environment:\n      MONGODB_HOST: \"mongodb+srv://&lt;REPLACE_ME&gt;/\"\n      MONGODB_USER: \"&lt;REPLACE_ME&gt;\"\n      MONGODB_PASS: \"&lt;REPLACE_ME&gt;\"\n</code></pre> <p>don't persist your credentials to git</p> <p>This file is ignored by <code>.gitconfig</code> so if you accidentally save those credentails, no changes will be known by your <code>git</code> process.</p> ShellShell outcome <pre><code># Manually bootstrapping all containers at once in background:\ndocker-compose up -d\n\n# through Makefile. Prefered over the \"manual docker-compose\" to allow faster\n## local development interactions \nmake rebuild\n</code></pre> <pre><code>[+] Running 4/4\n\u2714 Network budget-tracker-api-v2_otel-network  Created                                                  0.0s \n\u2714 Container jaeger                            Started                                                  0.2s \n\u2714 Container otel-collector                    Started                                                  0.3s \n\u2714 Container budger-tracker-api-v2             Started                                                  0.3s\n</code></pre> <p>All regular containers - including observability ones - will be up and running except MongoDB's container.</p> <p>We can use the same approach as running \"without containers\" to validate app's health:</p> Shell <pre><code># According to the app logs, the platform is running under port `8080`\n## According to the swagger, we can check there is a `/health` endpoint\n\ncurl http://localhost:8080/health\n</code></pre> <p>This is the expected outcome</p> <pre><code>{\n    \"message\": \"healthy\",\n    \"app\": true,\n    \"database\": true\n}\n</code></pre>"},{"location":"development/local/run_with_containers.html#dealing-with-mongodbs-dependency","title":"Dealing with MongoDB's dependency","text":"<p>If you won't want to deal with an external mongoDB but to test with a local one instead. We will be missing the details step-by-step for now but you can simply create a local mongoDB and point the correct <code>localhost:27017</code>:</p> docker-compose.yml <pre><code>  budger-tracker-api-v2:\n    build: ./\n    container_name: budger-tracker-api-v2\n    environment:\n      MONGODB_HOST: \"mongodb+srv://localhost:27017/\"\n      MONGODB_USER: \"&lt;REPLACE_ME&gt;\"\n      MONGODB_PASS: \"&lt;REPLACE_ME&gt;\"\n</code></pre>"},{"location":"development/local/run_without_containers.html","title":"Running without containers","text":""},{"location":"development/local/run_without_containers.html#running-the-code-locally","title":"Running the code locally","text":"<p>In this section, let's explore how you can run the platform locally without using container images.</p> <p>Running with or without containers?</p> <p>My personal preference is to always work with containers for everything. My advice is to go through the documentation on \u201crunning without containers,\u201d but in the end, stick with using containers.</p>"},{"location":"development/local/run_without_containers.html#without-containers","title":"Without containers","text":"<p>If you don't have/want any container engines running the app, you can build and run the platform by following these steps:</p> ShellShell outcome <pre><code>cd budget-tracker-api-v2\n\n# Ensure you have successfully `cd`ed to the correct directory by running:\npwd\n</code></pre> <pre><code>/Users/${my-user}/Code/budget-tracker-api-v2\n</code></pre> ShellShell outocome <pre><code>ls\n</code></pre> <pre><code>CHECKLIST.md            Dockerfile          go.sum              LICENSE             otel-collector-config.yaml  swagger\ndocker              docs                hack                main.go             README.md\ndocker-compose.yml      go.mod              internal            Makefile            sonar-project.properties\n</code></pre>"},{"location":"development/local/run_without_containers.html#building-and-running-your-app","title":"building and running your app","text":"<p>Since our app was written in <code>go</code>, we will use the binary to compile the locally:</p> Shell <pre><code># Install the needed dependencies:\ngo mod tidy\n\n# Build the binary\ngo build . -o budget-tracker\n</code></pre> <p>This command - if successful - will generate a local binary called <code>budget-tracker</code>.</p> <p>Now, you can simply run it:</p> Shell <pre><code># This command will make your binary \"runnable\"\nchmod +x budget-tracker\n\n# Finally, run the binary\n./budget-tracker-api\n</code></pre> <p>Ops! The app wasn't able to run, according to it's message</p> <pre><code>{\n    \"level\":\"fatal\",\n    \"msg\":\"empty MONGODB_HOST, MONGODB_USER or MONGODB_PASS env vars for mongodb\",\n    \"time\":\"2025-10-13T13:24:46-03:00\"\n}\n</code></pre> <p>The only external dependency for this application is a MongoDB database, as shown on the architecture page. This means we need to provide a functional MongoDB instance to the application\u2014either locally (e.g., through a container) or externally (e.g., via Atlas).</p> <p>If you try to pass a fake host or a non-existent MongoDB URL, the app will fail to start.</p> <p>Here\u2019s an example of a functional command that passes environment variables:</p> <pre><code># This command will pass environment variables directly\n## to your application's process\n\nMONGODB_HOST=\"mongodb+srv://my-mongodb-atlas-url.mongodb.net\" \\\nMONGODB_USER=\"user\" \\\nMONGODB_PASS=\"pass\" \\\n./budget-tracker-api\n</code></pre> <p>You could also export these variables globally but for simplicity we are not using this option for now:</p> Shell <pre><code>export MONGODB_HOST=\"mongodb+srv://my-mongodb-atlas-url.mongodb.net\" \\\nexport MONGODB_USER=\"user\" \\\nexport MONGODB_PASS=\"pass\"\n</code></pre> Shell <pre><code>./budget-tracker-api\n</code></pre>"},{"location":"development/local/run_without_containers.html#dealing-with-mongodbs-dependency","title":"Dealing with MongoDB's dependency","text":"<p>Let\u2019s take this chance (if you haven\u2019t set up your MongoDB Atlas instance yet) to grab your credentials from Atlas and run the app for the first time. Just replace the environment variable values in your command:</p> Shell <pre><code>MONGODB_HOST=\"mongodb+srv://my-example.fj2qq.mongodb.net/\" \\\nMONGODB_USER=\"my-user\" \\\nMONGODB_PASS=\"my-pass\" \\\n./budget-tracker-api\n</code></pre> <p>You should expect then the following outcome</p> <pre><code>{\"level\":\"info\",\"msg\":\"Server running on :8080\",\"time\":\"2025-10-13T13:42:04-03:00\"}\n</code></pre> <p>Now, we can simply test it locally by running a simple <code>curl</code> command:</p> Shell <pre><code># According to the app logs, the platform is running under port `8080`\n## According to the swagger, we can check there is a `/health` endpoint\n\ncurl http://localhost:8080/health\n</code></pre> <p>This is the expected outcome</p> <pre><code>{\n    \"message\": \"healthy\",\n    \"app\": true,\n    \"database\": true\n}\n</code></pre> <p>This means we made a request to our app, which validated if it's connection with MongoDB is working properly. This endpoint is particularly useful when you have High-Availability mechanisms such as Kubernetes' healthcheck.</p>"},{"location":"home/architecture.html","title":"Architecture","text":""},{"location":"home/architecture.html#architecture","title":"Architecture","text":"<p>Budget Tracker has - for now - a simple architecture, only requiring MongoDB to save your data.</p> <p> </p>"}]}