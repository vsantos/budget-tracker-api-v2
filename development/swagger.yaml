openapi: 3.0.3
info:
  title: Budget Tracker API
  version: 0.0.1
paths:
  /api/v1/jwt/issue:
   post:
      summary: "Create a new JWT token"
      description: "Create a new token to sign every request to the platform"
      security: []
      tags:
      - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JWTUser'
            example:
              login: "vsantos"
              password: "randompass"
      parameters:
        - in: header
          name: Content-Type
          required: true
          schema:
            type: string
            example: application/json
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
              example:
                type: "bearer"
                refresh: ""
                token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJleHAiOjE3NTg0OTIxMzcsImlhdCI6MTc1ODQ5MTgzNywibmFtZSI6InZzYW50b3MiLCJzdWIiOiJ0ZXN0In0.jXxP85bOfYSSgTSGSz9jJRAnAeZrz0VVZ4RInT0f_aM"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
              example:
                message: "required login and password to request a new token"
  /api/v1/users:    
    post:
      summary: "Create an user"
      description: "Create a new user to the platform"
      security:
        - bearerAuth: []
      tags:
      - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              login: "vsantos"
              firstname: "Victor"
              lastname: "Santos"
              email: "vsnatos.py@gmail.com"
              password: "randompass"
      parameters:
        - in: header
          name: Content-Type
          required: true
          schema:
            type: string
            example: application/json
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                message: "created user 'vsantos'"
                id: "68d066e8a4b62b805177aa91"
        '409':
          description: Conflict
          content:
            application/json:
              example:
                message: "could not create user"
                details: "user or email already registered"
  /api/v1/users/{id}:    
    get:
      summary: "Get details from an user"
      description: "based on the user_id, get the details from a single user"
      security:
        - bearerAuth: []
      tags:
      - Users
      parameters:
        - name: Content-Type
          in: header
          required: true
          schema:
            type: string
            example: application/json
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "68d066e8a4b62b805177aa91"
          description: user ID
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                id: "687baad049572fb8c4e305f9"
                login: "vsantos"
                firstname: "Victor"
                lastname: "Santos"
                email: "vsantos.py@gmail.com"
                password: "<sensitive>"
                created_at: "2025-07-19T14:25:20.996Z"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
              example:
                message: "could not find user"
                id: "687baad049572fb8c4e305f1"
        '500':
          description: User not found
          content:
            application/json:
              schema:
                type: object
              example:
                message: "not able to get ID format"
  /api/v1/cards:
    post:
      summary: Create a card
      description: Endpoint to create a new card for a given owner_id
      security:
        - bearerAuth: []
      tags:
      - Cards
      parameters:
        - in: header
          name: Content-Type
          required: true
          schema:
            type: string
            example: application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Card'
            example:
              owner_id: "687baad049572fb8c4e305f3"
              alias: "Platinum"
              type: "Debit"
              network: "VISA"
              bank: "Citibank"
              color: "#fff"
              last_digits: 1234
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
              example:
                message: "card created"
                status_code: 201
                card:
                  id: "68d036ba865f1ea380a77fa9"
                  owner_id: "687baad049572fb8c4e305f3"
                  alias: "Platinum"
                  type: "Debit"
                  network: "VISA"
                  bank: "Citibank"
                  color: "#fff"
                  last_digits: 1234
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                type: object
              example:
                message: "could not create card"
                details: "card already registered with the 'last 4 digits'"
                status_code: 409
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
              example:
                message: "could not create card"
                details: "internal error when posting card"
                status_code: 500
  /api/v1/cards/{id}:    
    get:
      summary: "Get details from a card"
      description: "based on the card_id, get the details from a single card"
      security:
        - bearerAuth: []
      tags:
      - Cards
      parameters:
        - in: header
          name: Content-Type
          required: true
          schema:
            type: string
            example: application/json
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "68d066e8a4b62b805177aa91"
          description: card ID
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
              example:
                id: "68d036ba865f1ea380a77fa9"
                owner_id: "687baad049572fb8c4e305f3"
                alias: "Platinum"
                type: "Debit"
                network: "VISA"
                bank: "Citibank"
                color: "#fff"
                last_digits: 1234
                created_at: "2025-09-21T17:32:49.61Z"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
              example:
                message: "could not find card"
                details: "card id '68c6246ba4bd976c14e03143' not found"
                status_code: 404
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
              example:
                message: "error when fetching card's details"
                details: "not able to get ID format"
    delete:
      summary: Delete a card
      security:
        - bearerAuth: []
      tags:
      - Cards
      parameters:
        - in: header
          name: Content-Type
          required: true
          schema:
            type: string
            example: application/json
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "68d066e8a4b62b805177aa91"
          description: card ID
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema:
                type: object
              example:
                message: "card deleted"
                id: "68c5a209829c95bee34722fb"
                status_code: 200
        '404':
          description: Not found. In case of trying to delete a non-existent card
          content:
            application/json:
              schema:
                type: object
              example:
                message: "card not deleted"
                details: "no cards were deleted from given card ID '68d03563239a30e8335f43a4'"
                status_code: 404
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
              example:
                message: "error when fetching card's details"
                details: "not able to get ID format"
  /api/v1/transactions:
    post:
      summary: Create a transactions
      description: Endpoint to create a new expense or income transaction for a given owner_id
      security:
        - bearerAuth: []
      tags:
      - Transactions
      parameters:
        - in: header
          name: Content-Type
          required: true
          schema:
            type: string
            example: application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
            example:
              owner_id: 687baad049572fb8c4e305f3
              balance_id: 687baad049572fb8c4e305f3
              type: expense
              description: Restaurante bomdebico
              amount: 10.9
              currency: BRL
              payment_method:
                credit:
                  owner_id: 687baad049572fb8c4e305f3
                  alias: Platinum
                  type: Debit
                  network: Mastertransaction
                  bank: Itau
                  color: "#ffffff"
                  last_digits: 7049
              categories:
              - food

      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
              example:
                message: "transaction created"
                status_code: 201
                transaction:
                  id: "68d036ba865f1ea380a77fa9"
                  owner_id: "687baad049572fb8c4e305f3"
                  alias: "Platinum"
                  type: "Debit"
                  network: "VISA"
                  bank: "Citibank"
                  color: "#fff"
                  last_digits: 1234
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                type: object
              example:
                message: "could not create transaction"
                details: "transaction already registered with the same ID"
                status_code: 409
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
              example:
                message: "could not create transaction"
                details: "internal error when posting transaction"
                status_code: 500
  /health:
   get:
      summary: "Fetches if the application is healthy"
      description: "By evaluating external dependencies, healthcheck will validate if the app is indeed healthy"
      security: []
      tags:
      - HealthCheck
      parameters:
        - in: header
          name: Content-Type
          required: true
          schema:
            type: string
            example: application/json
      responses:
        '200':
          description: Healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
              example:
                status: "healthy"
                app: true
                database: true
        '500':
          description: Internal Server ERror
          content:
            application/json:
              example:
                status: "unhealthy"
                app: true
                database: false
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    JWTUser:
      type: object
      properties:
        login:
          type: string
        password:
          type: string
    Token:
      type: object
      properties:
        type:
          type: string
        refresh:
          type: string
        token:
          type: string
    User:
      type: object
      properties:
        id:
          type: string
        login:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        created_at:
          type: string
    Card:
      type: object
      properties:
        owner_id:
          type: string
        alias:
          type: string
        type:
          type: string
        network:
          type: string
        bank:
          type: string
        color:
          type: string
        last_digits:
          type: integer
    Transaction:
      properties:
        owner_id:
          type: string
        balance_id:
          type: string
        type:
          type: string
        description:
          type: string
        amount:
          type: number
        currency:
          type: string
        payment_method:
          type: object
          properties:
            credit:
              $ref: '#/components/schemas/Card'
            debit:
              $ref: '#/components/schemas/Card'
            pix:
              type: boolean
            PaymentSlip:
              type: boolean
        categories:
          type: array
