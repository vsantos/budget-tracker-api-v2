{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Welcome","text":""},{"location":"index.html#welcome-to-budget-tracker-api","title":"Welcome to Budget Tracker API","text":""},{"location":"index.html#purpose","title":"Purpose","text":"<p>This simple platform was created for personal use, with the goal of refining and improving knowledge across several best practices: CI/CD, software engineering, observability, and security. A version of budget-tracker-api but with steroids.</p> <p>As an additional outcome, it provides a functional CRUD system designed to help manage day-to-day finances \u2014 keeping track of them to enable smarter decisions later on. This will become clearer once you reach the #architecture section.</p> <p>As a \u201cclassical\u201d REST API application, you can also use it as your personal backend for further studies. For instance, you might want to experiment with an MCP server using a real-world API (rather than the usual public JSON endpoints scattered across the internet) to learn from a realistic example.</p> <p>The idea behind this app is to develop features similar to those a simple finance spreadsheet could offer for personal use. If your goal is to actually manage your finances, it might be better to stick with a simple spreadsheet or a paid app.</p> <p>Proceed with learning purposes in mind</p> <p>This app contains some overengineering throughout the ecosystem. It isn\u2019t necessarily intended to be \u201cproduction-ready\u201d out of the box, but it aims to follow most production best practices.</p>"},{"location":"index.html#target-audience","title":"Target Audience","text":"<p>This application is aimed at technology enthusiasts and IT professionals. It\u2019s not a SaaS application ready to be used directly from a public URL. Instead, it requires you to clone the repository and explore it locally before considering deploying your own instance.</p>"},{"location":"discussions.html","title":"Discussions","text":""},{"location":"roadmap.html","title":"Roadmap","text":""},{"location":"roadmap.html#roadmap","title":"Roadmap","text":"<p>This process as a simple list once finished, it will be migrated to Github's issues.</p> <ul> <li> Functional<ul> <li> Balance CRUD</li> </ul> </li> <li> Non-Functional<ul> <li> Documentation</li> <li> Increase coverage % for unit tests</li> <li> Integration Tests with Kind</li> <li> MongoDB's index must be created at startup</li> <li> Prometheus' compliant /metrics</li> <li> Contribution process</li> <li> CD process</li> </ul> </li> </ul>"},{"location":"swagger.html","title":"Swagger","text":""},{"location":"api/packages/controller.html","title":"Controller","text":""},{"location":"api/packages/controller.html#controller","title":"controller","text":"<pre><code>import \"budget-tracker-api-v2/internal/http/controller\"\n</code></pre>"},{"location":"api/packages/controller.html#index","title":"Index","text":"<ul> <li>func GenerateJWTAccessToken(ctx context.Context, jwtKey string, sub string, login string) (string, error)</li> <li>func GenerateJWTRefreshToken(ctx context.Context, jwtKey string, sub string) (string, error)</li> <li>func SwaggerRegisterRouter(r *mux.Router)</li> <li>type AuthController</li> <li>func (uc *AuthController) CreateToken(w http.ResponseWriter, r *http.Request)</li> <li>func (ac *AuthController) RegisterRoutes(r *mux.Router)</li> <li>type CardDeletedMessage</li> <li>type CardsController</li> <li>func (uc *CardsController) CreateCard(w http.ResponseWriter, r *http.Request)</li> <li>func (uc *CardsController) DeleteCard(w http.ResponseWriter, r *http.Request)</li> <li>func (uc *CardsController) GetCard(w http.ResponseWriter, r *http.Request)</li> <li>func (uc *CardsController) GetCards(w http.ResponseWriter, r *http.Request)</li> <li>func (uc *CardsController) RegisterRoutes(r *mux.Router)</li> <li>type CardsCreatedMessage</li> <li>type CardsErrorMessage</li> <li>type HealthController</li> <li>func (uc *HealthController) HealthCheck(w http.ResponseWriter, r *http.Request)</li> <li>func (uc *HealthController) RegisterRoutes(r *mux.Router)</li> <li>type TransactionCreatedMessage</li> <li>type TransactionErrorMessage</li> <li>type TransactionsController</li> <li>func (tc *TransactionsController) CreateTransaction(w http.ResponseWriter, r *http.Request)</li> <li>func (uc *TransactionsController) RegisterRoutes(r *mux.Router)</li> <li>type UsersController</li> <li>func (uc *UsersController) CreateUser(w http.ResponseWriter, r *http.Request)</li> <li>func (uc *UsersController) GetUser(w http.ResponseWriter, r *http.Request)</li> <li>func (uc *UsersController) RegisterRoutes(r *mux.Router)</li> </ul>"},{"location":"api/packages/controller.html#func-generatejwtaccesstoken","title":"func GenerateJWTAccessToken","text":"<pre><code>func GenerateJWTAccessToken(ctx context.Context, jwtKey string, sub string, login string) (string, error)\n</code></pre> <p>GenerateJWTAccessToken will generate a JWT access token</p> <p></p>"},{"location":"api/packages/controller.html#func-generatejwtrefreshtoken","title":"func GenerateJWTRefreshToken","text":"<pre><code>func GenerateJWTRefreshToken(ctx context.Context, jwtKey string, sub string) (string, error)\n</code></pre> <p>GenerateJWTRefreshToken will generate a new refresh token</p> <p></p>"},{"location":"api/packages/controller.html#func-swaggerregisterrouter","title":"func SwaggerRegisterRouter","text":"<pre><code>func SwaggerRegisterRouter(r *mux.Router)\n</code></pre>"},{"location":"api/packages/controller.html#type-authcontroller","title":"type AuthController","text":"<pre><code>type AuthController struct {\n    Tracer   trace.Tracer\n    UserRepo repository.UserCollectionInterface\n}\n</code></pre>"},{"location":"api/packages/controller.html#func-authcontroller-createtoken","title":"func (*AuthController) CreateToken","text":"<pre><code>func (uc *AuthController) CreateToken(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>GetCards handler list of all card within the platform without filters. Deprecated.</p> <p></p>"},{"location":"api/packages/controller.html#func-authcontroller-registerroutes","title":"func (*AuthController) RegisterRoutes","text":"<pre><code>func (ac *AuthController) RegisterRoutes(r *mux.Router)\n</code></pre> <p>RegisterRoutes register router for handling Card operations</p> <p></p>"},{"location":"api/packages/controller.html#type-carddeletedmessage","title":"type CardDeletedMessage","text":"<pre><code>type CardDeletedMessage struct {\n    Message    string `json:\"message\"`\n    ID         string `json:\"id\"`\n    StatusCode int32  `json:\"status_code,omitempty\"`\n}\n</code></pre>"},{"location":"api/packages/controller.html#type-cardscontroller","title":"type CardsController","text":"<p>CardsController injects CardRepository to controllers</p> <pre><code>type CardsController struct {\n    Tracer trace.Tracer\n    Repo   repository.CardCollectionInterface\n}\n</code></pre> <p></p>"},{"location":"api/packages/controller.html#func-cardscontroller-createcard","title":"func (*CardsController) CreateCard","text":"<pre><code>func (uc *CardsController) CreateCard(w http.ResponseWriter, r *http.Request)\n</code></pre>"},{"location":"api/packages/controller.html#func-cardscontroller-deletecard","title":"func (*CardsController) DeleteCard","text":"<pre><code>func (uc *CardsController) DeleteCard(w http.ResponseWriter, r *http.Request)\n</code></pre>"},{"location":"api/packages/controller.html#func-cardscontroller-getcard","title":"func (*CardsController) GetCard","text":"<pre><code>func (uc *CardsController) GetCard(w http.ResponseWriter, r *http.Request)\n</code></pre>"},{"location":"api/packages/controller.html#func-cardscontroller-getcards","title":"func (*CardsController) GetCards","text":"<pre><code>func (uc *CardsController) GetCards(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>GetCards handler list of all card within the platform without filters. Deprecated.</p> <p></p>"},{"location":"api/packages/controller.html#func-cardscontroller-registerroutes","title":"func (*CardsController) RegisterRoutes","text":"<pre><code>func (uc *CardsController) RegisterRoutes(r *mux.Router)\n</code></pre> <p>RegisterRoutes register router for handling Card operations</p> <p></p>"},{"location":"api/packages/controller.html#type-cardscreatedmessage","title":"type CardsCreatedMessage","text":"<pre><code>type CardsCreatedMessage struct {\n    Message    string     `json:\"message\"`\n    ID         string     `json:\"id\"`\n    OwnerID    string     `json:\"owner_id\"`\n    StatusCode int32      `json:\"status_code\"`\n    Card       model.Card `json:\"card\"`\n}\n</code></pre>"},{"location":"api/packages/controller.html#type-cardserrormessage","title":"type CardsErrorMessage","text":"<pre><code>type CardsErrorMessage struct {\n    Message    string `json:\"message\"`\n    Details    string `json:\"details\"`\n    StatusCode int32  `json:\"status_code,omitempty\"`\n}\n</code></pre>"},{"location":"api/packages/controller.html#type-healthcontroller","title":"type HealthController","text":"<pre><code>type HealthController struct {\n    Tracer     trace.Tracer\n    HealthRepo repository.HealthCollectionInterface\n}\n</code></pre>"},{"location":"api/packages/controller.html#func-healthcontroller-healthcheck","title":"func (*HealthController) HealthCheck","text":"<pre><code>func (uc *HealthController) HealthCheck(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>Ping handler list of all card within the platform without filters. Deprecated.</p> <p></p>"},{"location":"api/packages/controller.html#func-healthcontroller-registerroutes","title":"func (*HealthController) RegisterRoutes","text":"<pre><code>func (uc *HealthController) RegisterRoutes(r *mux.Router)\n</code></pre> <p>RegisterRoutes register router for handling healthcheck operations</p> <p></p>"},{"location":"api/packages/controller.html#type-transactioncreatedmessage","title":"type TransactionCreatedMessage","text":"<pre><code>type TransactionCreatedMessage struct {\n    Message     string            `json:\"message\"`\n    ID          string            `json:\"id\"`\n    OwnerID     string            `json:\"owner_id\"`\n    StatusCode  int32             `json:\"status_code\"`\n    Transaction model.Transaction `json:\"transaction\"`\n}\n</code></pre>"},{"location":"api/packages/controller.html#type-transactionerrormessage","title":"type TransactionErrorMessage","text":"<pre><code>type TransactionErrorMessage struct {\n    Message    string `json:\"message\"`\n    Details    string `json:\"details\"`\n    StatusCode int32  `json:\"status_code,omitempty\"`\n}\n</code></pre>"},{"location":"api/packages/controller.html#type-transactionscontroller","title":"type TransactionsController","text":"<p>TransactionsController injects CardRepository to controllers</p> <pre><code>type TransactionsController struct {\n    Tracer trace.Tracer\n    Repo   repository.TransactionCollectionInterface\n}\n</code></pre> <p></p>"},{"location":"api/packages/controller.html#func-transactionscontroller-createtransaction","title":"func (*TransactionsController) CreateTransaction","text":"<pre><code>func (tc *TransactionsController) CreateTransaction(w http.ResponseWriter, r *http.Request)\n</code></pre>"},{"location":"api/packages/controller.html#func-transactionscontroller-registerroutes","title":"func (*TransactionsController) RegisterRoutes","text":"<pre><code>func (uc *TransactionsController) RegisterRoutes(r *mux.Router)\n</code></pre> <p>RegisterRoutes register router for handling Card operations</p> <p></p>"},{"location":"api/packages/controller.html#type-userscontroller","title":"type UsersController","text":"<p>UsersController injects UserRepository to controllers</p> <pre><code>type UsersController struct {\n    Tracer trace.Tracer\n    Repo   repository.UserCollectionInterface\n}\n</code></pre> <p></p>"},{"location":"api/packages/controller.html#func-userscontroller-createuser","title":"func (*UsersController) CreateUser","text":"<pre><code>func (uc *UsersController) CreateUser(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>CreateUser create a new user within the platform</p> <p></p>"},{"location":"api/packages/controller.html#func-userscontroller-getuser","title":"func (*UsersController) GetUser","text":"<pre><code>func (uc *UsersController) GetUser(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>GetUser will find a single user based on ID</p> <p></p>"},{"location":"api/packages/controller.html#func-userscontroller-registerroutes","title":"func (*UsersController) RegisterRoutes","text":"<pre><code>func (uc *UsersController) RegisterRoutes(r *mux.Router)\n</code></pre> <p>RegisterRoutes register router for handling User operations</p> <p>Generated by gomarkdoc</p>"},{"location":"api/packages/crypt.html","title":"Crypt","text":""},{"location":"api/packages/crypt.html#crypt","title":"crypt","text":"<pre><code>import \"budget-tracker-api-v2/internal/utils/crypt\"\n</code></pre>"},{"location":"api/packages/crypt.html#index","title":"Index","text":"<ul> <li>func CheckPasswordHash(password, hash string) bool</li> <li>func GenerateSaltedPassword(plainPassword string) (saltedPass string, err error)</li> </ul>"},{"location":"api/packages/crypt.html#func-checkpasswordhash","title":"func CheckPasswordHash","text":"<pre><code>func CheckPasswordHash(password, hash string) bool\n</code></pre> <p>CheckPasswordHash will valid if hash matches a given plaintext password</p> <p></p>"},{"location":"api/packages/crypt.html#func-generatesaltedpassword","title":"func GenerateSaltedPassword","text":"<pre><code>func GenerateSaltedPassword(plainPassword string) (saltedPass string, err error)\n</code></pre> <p>GenerateSaltedPassword will return a hashed password</p> <p>Generated by gomarkdoc</p>"},{"location":"api/packages/middleware.html","title":"Middleware","text":""},{"location":"api/packages/middleware.html#middleware","title":"middleware","text":"<pre><code>import \"budget-tracker-api-v2/internal/http/middleware\"\n</code></pre>"},{"location":"api/packages/middleware.html#index","title":"Index","text":"<ul> <li>func InjectHeaders(next http.Handler) http.Handler</li> <li>func RequireContentTypeJSON(h http.Handler) http.Handler</li> <li>func RequireTokenAuthentication(h http.Handler) http.Handler</li> </ul>"},{"location":"api/packages/middleware.html#func-injectheaders","title":"func InjectHeaders","text":"<pre><code>func InjectHeaders(next http.Handler) http.Handler\n</code></pre> <p>InjectHeaders acts as a middleware between routers to inject common response headers</p> <p></p>"},{"location":"api/packages/middleware.html#func-requirecontenttypejson","title":"func RequireContentTypeJSON","text":"<pre><code>func RequireContentTypeJSON(h http.Handler) http.Handler\n</code></pre> <p>RequireContentTypeJSON enforces JSON content-type from requests</p> <p></p>"},{"location":"api/packages/middleware.html#func-requiretokenauthentication","title":"func RequireTokenAuthentication","text":"<pre><code>func RequireTokenAuthentication(h http.Handler) http.Handler\n</code></pre> <p>RequireTokenAuthentication enforces authentication token from requests</p> <p>Generated by gomarkdoc</p>"},{"location":"api/packages/model.html","title":"Model","text":""},{"location":"api/packages/model.html#model","title":"model","text":"<pre><code>import \"budget-tracker-api-v2/internal/model\"\n</code></pre>"},{"location":"api/packages/model.html#index","title":"Index","text":"<ul> <li>type Balance</li> <li>type BalanceInfo</li> <li>type Card</li> <li>type FixedTransaction</li> <li>type JWTResponse</li> <li>type JWTUser</li> <li>type PaymentMethod</li> <li>type Transaction</li> <li>type User</li> </ul>"},{"location":"api/packages/model.html#type-balance","title":"type Balance","text":"<pre><code>type Balance struct {\n    ID           primitive.ObjectID `json:\"id,omitempty\" bson:\"_id,omitempty\"`\n    OwnerID      primitive.ObjectID `json:\"owner_id,omitempty\" bson:\"owner_id,omitempty\"`\n    Balance      BalanceInfo        `json:\"balance\" bson:\"balance\"`\n    BalanceMonth time.Month         `json:\"month,omitempty\" bson:\"month,omitempty\"`\n    BalanceYear  int                `json:\"year,omitempty\" bson:\"year,omitempty\"`\n    Transactions []*Transaction     `json:\"transactions,omitempty\" bson:\"transactions,omitempty\"`\n    // example: 2025-09-21T20:58:16.53Z\n    CreatedAt primitive.DateTime `json:\"created_at,omitempty\" bson:\"created_at,omitempty\"`\n}\n</code></pre>"},{"location":"api/packages/model.html#type-balanceinfo","title":"type BalanceInfo","text":"<pre><code>type BalanceInfo struct {\n    Total    float32\n    Currency string\n}\n</code></pre>"},{"location":"api/packages/model.html#type-card","title":"type Card","text":"<p>Card defines a user credit card swagger:model</p> <pre><code>type Card struct {\n    ID         primitive.ObjectID `json:\"id,omitempty\" bson:\"_id,omitempty\"`\n    OwnerID    primitive.ObjectID `json:\"owner_id,omitempty\" bson:\"owner_id,omitempty\"`\n    Alias      string             `json:\"alias\" bson:\"alias\"`\n    Type       string             `json:\"type\" bson:\"type\"`\n    Network    string             `json:\"network\" bson:\"network\"`\n    Bank       string             `json:\"bank\" bson:\"bank\"`\n    Color      string             `json:\"color\" bson:\"color\"`\n    LastDigits int32              `json:\"last_digits\" bson:\"last_digits\"`\n    CreatedAt  primitive.DateTime `json:\"created_at,omitempty\" bson:\"created_at,omitempty\" swaggerignore:\"true\"`\n}\n</code></pre> <p></p>"},{"location":"api/packages/model.html#type-fixedtransaction","title":"type FixedTransaction","text":"<p>FixedTransaction defines a user transaction which will be applied every month until expires - if expires. Example: stream services or gym</p> <pre><code>type FixedTransaction struct {\n    // swagger:ignore\n    ID      primitive.ObjectID `json:\"id,omitempty\" bson:\"_id,omitempty\"`\n    OwnerID primitive.ObjectID `json:\"owner_id,omitempty\" bson:\"owner_id,omitempty\"`\n    // example: guitar lessons\n    Description string `json:\"description\" bson:\"description\"`\n    // example: 12.90\n    Amount float64 `json:\"amount\" bson:\"amount\"`\n    // example: BRL\n    Currency string `json:\"currency\" bson:\"currency\"`\n    // example: Credit\n    PaymentMethod PaymentMethod `json:\"payment_method\" bson:\"payment_method\"`\n    // example: 2025-09-16T17:33:10.64Z\n    TransactionDate primitive.DateTime `json:\"transaction_date,omitempty\" bson:\"transaction_date,omitempty\"`\n    // example: \"categories\": [\"stream service\"]\n    Categories []string `json:\"categories,omitempty\" bson:\"categories,omitempty\"`\n    // example: 2026-09-21T20:58:16.53Z\n    ExpirationDate primitive.DateTime\n    // example: 2025-09-21T20:58:16.53Z\n    CreatedAt primitive.DateTime `json:\"created_at,omitempty\" bson:\"created_at,omitempty\"`\n}\n</code></pre> <p></p>"},{"location":"api/packages/model.html#type-jwtresponse","title":"type JWTResponse","text":"<p>JWTResponse returns as HTTP response the user details (to be used along with the generated JWT token)</p> <pre><code>type JWTResponse struct {\n    Type         string `json:\"type\"`\n    RefreshToken string `json:\"refresh\"`\n    AccessToken  string `json:\"token\"`\n}\n</code></pre> <p></p>"},{"location":"api/packages/model.html#type-jwtuser","title":"type JWTUser","text":"<p>JWTUSer defines a minimum set of user for posterior authentication</p> <pre><code>type JWTUser struct {\n    // ID primitive.ObjectID `json:\"id,omitempty\" bson:\"_id,omitempty\"`\n    // example: vsantos\n    Login string `json:\"login\" bson:\"login\"`\n    // example: myplaintextpassword\n    Password string `json:\"password\" bson:\"password\"`\n}\n</code></pre> <p></p>"},{"location":"api/packages/model.html#type-paymentmethod","title":"type PaymentMethod","text":"<p>PaymentMethod defines which payment method was used for a certain transaction</p> <pre><code>type PaymentMethod struct {\n    Credit      Card `json:\"credit,omitempty\" bson:\"credit,omitempty\"`\n    Debit       Card `json:\"debit,omitempty\" bson:\"debit,omitempty\"`\n    Pix         bool `json:\"pix,omitempty\" bson:\"pix,omitempty\"`\n    PaymentSlip bool `json:\"payment_slip,omitempty\" bson:\"payment_slip,omitempty\"`\n}\n</code></pre> <p></p>"},{"location":"api/packages/model.html#type-transaction","title":"type Transaction","text":"<p>Transaction defines a user transaction to be added to a posterior Balance</p> <pre><code>type Transaction struct {\n    // swagger:ignore\n    ID        primitive.ObjectID `json:\"id,omitempty\" bson:\"_id,omitempty\"`\n    BalanceID primitive.ObjectID `json:\"balance_id,omitempty\" bson:\"balance_id,omitempty\"`\n    OwnerID   primitive.ObjectID `json:\"owner_id,omitempty\" bson:\"owner_id,omitempty\"`\n    // example: income/expense\n    Type string `json:\"type\" bson:\"type\"`\n    // example: guitar lessons\n    Description string `json:\"description\" bson:\"description\"`\n    // example: 12.90\n    Amount float64 `json:\"amount\" bson:\"amount\"`\n    // example: BRL\n    Currency string `json:\"currency\" bson:\"currency\"`\n    // example: Credit\n    PaymentMethod PaymentMethod `json:\"payment_method\" bson:\"payment_method\"`\n    // example: 2025-09-16T17:33:10.64Z\n    TransactionDate primitive.DateTime `json:\"transaction_date,omitempty\" bson:\"transaction_date,omitempty\"`\n    // example: \"categories\": [\"personal development\"]\n    Categories []string `json:\"categories,omitempty\" bson:\"categories,omitempty\"`\n    // example: 2025-09-21T20:58:16.53Z\n    CreatedAt primitive.DateTime `json:\"created_at,omitempty\" bson:\"created_at,omitempty\"`\n}\n</code></pre> <p></p>"},{"location":"api/packages/model.html#type-user","title":"type User","text":"<p>User defines a user struct</p> <pre><code>type User struct {\n    // swagger:ignore\n    ID  primitive.ObjectID `json:\"id,omitempty\" bson:\"_id,omitempty\"`\n    // example: vsantos\n    Login string `json:\"login\" bson:\"login\"`\n    // example: Victor\n    Firstname string `json:\"firstname,omitempty\" bson:\"firstname,omitempty\"`\n    // example: Santos\n    Lastname string `json:\"lastname,omitempty\" bson:\"lastname,omitempty\"`\n    // example: vsantos.py@gmail.com\n    Email string `json:\"email,omitempty\" bson:\"email,omitempty\"`\n    // example: myplaintextpassword\n    Password string `json:\"password,omitempty\" bson:\"salted_password,omitempty\"`\n    // swagger:ignore\n    CreatedAt primitive.DateTime `json:\"created_at,omitempty\" bson:\"created_at,omitempty\"`\n}\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"api/packages/mongodb.html","title":"MongoDB","text":""},{"location":"api/packages/mongodb.html#mongodb","title":"mongodb","text":"<pre><code>import \"budget-tracker-api-v2/internal/repository/mongodb\"\n</code></pre>"},{"location":"api/packages/mongodb.html#index","title":"Index","text":"<ul> <li>func NewCardRepository(ctx context.Context, tracer trace.Tracer, c repository.CardCollectionInterface) (repository.CardRepoInterface, error)</li> <li>func NewClient() (*mongo.Client, error)</li> <li>func NewTransactionRepository(ctx context.Context, tracer trace.Tracer, c repository.TransactionCollectionInterface) (repository.TransactionRepoInterface, error)</li> <li>func NewUserRepository(ctx context.Context, tracer trace.Tracer, c repository.UserCollectionInterface) (repository.UserRepoInterface, error)</li> <li>type CardCollectionConfig</li> <li>func (c *CardCollectionConfig) CreateIndexes(ctx context.Context, indexes []string) error</li> <li>func (c *CardCollectionConfig) DeleteOne(ctx context.Context, id string) (int64, error)</li> <li>func (c *CardCollectionConfig) FindOne(ctx context.Context, id string) (*model.Card, error)</li> <li>func (c *CardCollectionConfig) InsertOne(ctx context.Context, document interface{}) (id string, err error)</li> <li>type CardMockCollectionConfig</li> <li>func (c *CardMockCollectionConfig) CreateIndexes(ctx context.Context, indexes []string) error</li> <li>func (c *CardMockCollectionConfig) DeleteOne(ctx context.Context, id string) (int64, error)</li> <li>func (c *CardMockCollectionConfig) FindOne(ctx context.Context, id string) (*model.Card, error)</li> <li>func (c *CardMockCollectionConfig) InsertOne(ctx context.Context, document interface{}) (id string, err error)</li> <li>type HealthCollectionConfig</li> <li>func (c *HealthCollectionConfig) Ping(ctx context.Context) (healthy bool, err error)</li> <li>type HealthMockCollectionConfig</li> <li>func (c *HealthMockCollectionConfig) Ping(ctx context.Context) (bool, error)</li> <li>type MongoCardRepository</li> <li>func (r *MongoCardRepository) Delete(ctx context.Context, empID string) (int64, error)</li> <li>func (r *MongoCardRepository) FindByID(ctx context.Context, empID string) (*model.Card, error)</li> <li>func (r *MongoCardRepository) Insert(ctx context.Context, emp *model.Card) (*model.Card, error)</li> <li>type MongoHealthRepository</li> <li>type MongoTransactionRepository</li> <li>func (r *MongoTransactionRepository) Delete(ctx context.Context, empID string) (int64, error)</li> <li>func (r *MongoTransactionRepository) FindByID(ctx context.Context, empID string) (*model.Transaction, error)</li> <li>func (r *MongoTransactionRepository) Insert(ctx context.Context, emp *model.Transaction) (*model.Transaction, error)</li> <li>type MongoUserRepository</li> <li>func (r *MongoUserRepository) Delete(ctx context.Context, empID string) (int64, error)</li> <li>func (r *MongoUserRepository) FindByID(ctx context.Context, empID string) (*model.User, error)</li> <li>func (r *MongoUserRepository) Insert(ctx context.Context, emp *model.User) (*model.User, error)</li> <li>type TransactionCollectionConfig</li> <li>func (c *TransactionCollectionConfig) CreateIndexes(ctx context.Context, indexes []string) error</li> <li>func (c *TransactionCollectionConfig) DeleteOne(ctx context.Context, id string) (int64, error)</li> <li>func (c *TransactionCollectionConfig) FindOne(ctx context.Context, id string) (*model.Transaction, error)</li> <li>func (c *TransactionCollectionConfig) InsertOne(ctx context.Context, document interface{}) (id string, err error)</li> <li>type UserCollectionConfig</li> <li>func (c *UserCollectionConfig) CreateIndexes(ctx context.Context, indexes []string) error</li> <li>func (c *UserCollectionConfig) DeleteOne(ctx context.Context, id string) (int64, error)</li> <li>func (c *UserCollectionConfig) FindOne(ctx context.Context, id string) (*model.User, error)</li> <li>func (c *UserCollectionConfig) FindOneBy(ctx context.Context, login string) (*model.User, error)</li> <li>func (c *UserCollectionConfig) InsertOne(ctx context.Context, document interface{}) (id string, err error)</li> <li>type UserCollectionInterface</li> <li>type UserMockCollectionConfig</li> <li>func (c *UserMockCollectionConfig) CreateIndexes(ctx context.Context, indexes []string) error</li> <li>func (c *UserMockCollectionConfig) DeleteOne(ctx context.Context, id string) (int64, error)</li> <li>func (c *UserMockCollectionConfig) FindOne(ctx context.Context, id string) (*model.User, error)</li> <li>func (c *UserMockCollectionConfig) FindOneBy(ctx context.Context, login string) (*model.User, error)</li> <li>func (c *UserMockCollectionConfig) InsertOne(ctx context.Context, document interface{}) (id string, err error)</li> </ul>"},{"location":"api/packages/mongodb.html#func-newcardrepository","title":"func NewCardRepository","text":"<pre><code>func NewCardRepository(ctx context.Context, tracer trace.Tracer, c repository.CardCollectionInterface) (repository.CardRepoInterface, error)\n</code></pre> <p>NewCardRepository will return an CardRepoInterface for mongodb</p> <p></p>"},{"location":"api/packages/mongodb.html#func-newclient","title":"func NewClient","text":"<pre><code>func NewClient() (*mongo.Client, error)\n</code></pre> <p>NewClient will return a valid mongoDB connection</p> <p></p>"},{"location":"api/packages/mongodb.html#func-newtransactionrepository","title":"func NewTransactionRepository","text":"<pre><code>func NewTransactionRepository(ctx context.Context, tracer trace.Tracer, c repository.TransactionCollectionInterface) (repository.TransactionRepoInterface, error)\n</code></pre> <p>NewTransactionRepository will return an TransactionRepoInterface for mongodb</p> <p></p>"},{"location":"api/packages/mongodb.html#func-newuserrepository","title":"func NewUserRepository","text":"<pre><code>func NewUserRepository(ctx context.Context, tracer trace.Tracer, c repository.UserCollectionInterface) (repository.UserRepoInterface, error)\n</code></pre> <p>NewUserRepository will return an UserRepoInterface for mongodb</p> <p></p>"},{"location":"api/packages/mongodb.html#type-cardcollectionconfig","title":"type CardCollectionConfig","text":"<p>CardCollectionConfig will implement mongodb collection functions</p> <pre><code>type CardCollectionConfig struct {\n    Tracer          trace.Tracer\n    MongoCollection *mongo.Collection\n}\n</code></pre> <p></p>"},{"location":"api/packages/mongodb.html#func-cardcollectionconfig-createindexes","title":"func (*CardCollectionConfig) CreateIndexes","text":"<pre><code>func (c *CardCollectionConfig) CreateIndexes(ctx context.Context, indexes []string) error\n</code></pre> <p>CreateIndexes will create mongodb indexes</p> <p></p>"},{"location":"api/packages/mongodb.html#func-cardcollectionconfig-deleteone","title":"func (*CardCollectionConfig) DeleteOne","text":"<pre><code>func (c *CardCollectionConfig) DeleteOne(ctx context.Context, id string) (int64, error)\n</code></pre> <p>DeleteOne will find a Card from collection</p> <p></p>"},{"location":"api/packages/mongodb.html#func-cardcollectionconfig-findone","title":"func (*CardCollectionConfig) FindOne","text":"<pre><code>func (c *CardCollectionConfig) FindOne(ctx context.Context, id string) (*model.Card, error)\n</code></pre> <p>FindOne will find a Card from collection</p> <p></p>"},{"location":"api/packages/mongodb.html#func-cardcollectionconfig-insertone","title":"func (*CardCollectionConfig) InsertOne","text":"<pre><code>func (c *CardCollectionConfig) InsertOne(ctx context.Context, document interface{}) (id string, err error)\n</code></pre> <p>InsertOne will insert a document into mongodb</p> <p></p>"},{"location":"api/packages/mongodb.html#type-cardmockcollectionconfig","title":"type CardMockCollectionConfig","text":"<p>CardMockCollectionConfig will implement mongodb collection functions</p> <pre><code>type CardMockCollectionConfig struct {\n    Error error\n}\n</code></pre> <p></p>"},{"location":"api/packages/mongodb.html#func-cardmockcollectionconfig-createindexes","title":"func (*CardMockCollectionConfig) CreateIndexes","text":"<pre><code>func (c *CardMockCollectionConfig) CreateIndexes(ctx context.Context, indexes []string) error\n</code></pre> <p>CreateIndexes will create mongodb indexes</p> <p></p>"},{"location":"api/packages/mongodb.html#func-cardmockcollectionconfig-deleteone","title":"func (*CardMockCollectionConfig) DeleteOne","text":"<pre><code>func (c *CardMockCollectionConfig) DeleteOne(ctx context.Context, id string) (int64, error)\n</code></pre> <p>DeleteOne will insert a document into mongodb</p> <p></p>"},{"location":"api/packages/mongodb.html#func-cardmockcollectionconfig-findone","title":"func (*CardMockCollectionConfig) FindOne","text":"<pre><code>func (c *CardMockCollectionConfig) FindOne(ctx context.Context, id string) (*model.Card, error)\n</code></pre> <p>FindOne will insert a document into mongodb</p> <p></p>"},{"location":"api/packages/mongodb.html#func-cardmockcollectionconfig-insertone","title":"func (*CardMockCollectionConfig) InsertOne","text":"<pre><code>func (c *CardMockCollectionConfig) InsertOne(ctx context.Context, document interface{}) (id string, err error)\n</code></pre> <p>InsertOne will insert a document into mongodb</p> <p></p>"},{"location":"api/packages/mongodb.html#type-healthcollectionconfig","title":"type HealthCollectionConfig","text":"<p>HealthCollectionConfig will implement mongodb collection functions for healthchecks</p> <pre><code>type HealthCollectionConfig struct {\n    Tracer          trace.Tracer\n    MongoCollection *mongo.Collection\n}\n</code></pre> <p></p>"},{"location":"api/packages/mongodb.html#func-healthcollectionconfig-ping","title":"func (*HealthCollectionConfig) Ping","text":"<pre><code>func (c *HealthCollectionConfig) Ping(ctx context.Context) (healthy bool, err error)\n</code></pre>"},{"location":"api/packages/mongodb.html#type-healthmockcollectionconfig","title":"type HealthMockCollectionConfig","text":"<p>UserMockCollectionConfig will implement mongodb collection functions</p> <pre><code>type HealthMockCollectionConfig struct {\n    Error error\n}\n</code></pre> <p></p>"},{"location":"api/packages/mongodb.html#func-healthmockcollectionconfig-ping","title":"func (*HealthMockCollectionConfig) Ping","text":"<pre><code>func (c *HealthMockCollectionConfig) Ping(ctx context.Context) (bool, error)\n</code></pre> <p>CreateIndexes will create mongodb indexes</p> <p></p>"},{"location":"api/packages/mongodb.html#type-mongocardrepository","title":"type MongoCardRepository","text":"<p>MongoCardRepository defines a Repository for Card model</p> <pre><code>type MongoCardRepository struct {\n    Tracer          trace.Tracer\n    MongoCollection repository.CardCollectionInterface\n}\n</code></pre> <p></p>"},{"location":"api/packages/mongodb.html#func-mongocardrepository-delete","title":"func (*MongoCardRepository) Delete","text":"<pre><code>func (r *MongoCardRepository) Delete(ctx context.Context, empID string) (int64, error)\n</code></pre> <p>Delete will delete an card based on its ID</p> <p></p>"},{"location":"api/packages/mongodb.html#func-mongocardrepository-findbyid","title":"func (*MongoCardRepository) FindByID","text":"<pre><code>func (r *MongoCardRepository) FindByID(ctx context.Context, empID string) (*model.Card, error)\n</code></pre> <p>FindByID will fetch an card based on its ID</p> <p></p>"},{"location":"api/packages/mongodb.html#func-mongocardrepository-insert","title":"func (*MongoCardRepository) Insert","text":"<pre><code>func (r *MongoCardRepository) Insert(ctx context.Context, emp *model.Card) (*model.Card, error)\n</code></pre> <p>Insert will insert an card</p> <p></p>"},{"location":"api/packages/mongodb.html#type-mongohealthrepository","title":"type MongoHealthRepository","text":"<p>MongoHealthRepository defines a Repository for User model</p> <pre><code>type MongoHealthRepository struct {\n    MongoCollection repository.HealthCollectionInterface\n}\n</code></pre> <p></p>"},{"location":"api/packages/mongodb.html#type-mongotransactionrepository","title":"type MongoTransactionRepository","text":"<pre><code>type MongoTransactionRepository struct {\n    Tracer          trace.Tracer\n    MongoCollection repository.TransactionCollectionInterface\n}\n</code></pre>"},{"location":"api/packages/mongodb.html#func-mongotransactionrepository-delete","title":"func (*MongoTransactionRepository) Delete","text":"<pre><code>func (r *MongoTransactionRepository) Delete(ctx context.Context, empID string) (int64, error)\n</code></pre> <p>Delete will delete an card based on its ID</p> <p></p>"},{"location":"api/packages/mongodb.html#func-mongotransactionrepository-findbyid","title":"func (*MongoTransactionRepository) FindByID","text":"<pre><code>func (r *MongoTransactionRepository) FindByID(ctx context.Context, empID string) (*model.Transaction, error)\n</code></pre> <p>FindByID will fetch an card based on its ID</p> <p></p>"},{"location":"api/packages/mongodb.html#func-mongotransactionrepository-insert","title":"func (*MongoTransactionRepository) Insert","text":"<pre><code>func (r *MongoTransactionRepository) Insert(ctx context.Context, emp *model.Transaction) (*model.Transaction, error)\n</code></pre> <p>Insert will insert an card</p> <p></p>"},{"location":"api/packages/mongodb.html#type-mongouserrepository","title":"type MongoUserRepository","text":"<p>MongoUserRepository defines a Repository for User model</p> <pre><code>type MongoUserRepository struct {\n    MongoCollection repository.UserCollectionInterface\n}\n</code></pre> <p></p>"},{"location":"api/packages/mongodb.html#func-mongouserrepository-delete","title":"func (*MongoUserRepository) Delete","text":"<pre><code>func (r *MongoUserRepository) Delete(ctx context.Context, empID string) (int64, error)\n</code></pre> <p>Delete will delete an user based on its ID</p> <p></p>"},{"location":"api/packages/mongodb.html#func-mongouserrepository-findbyid","title":"func (*MongoUserRepository) FindByID","text":"<pre><code>func (r *MongoUserRepository) FindByID(ctx context.Context, empID string) (*model.User, error)\n</code></pre> <p>FindByID will fetch an user based on its ID</p> <p></p>"},{"location":"api/packages/mongodb.html#func-mongouserrepository-insert","title":"func (*MongoUserRepository) Insert","text":"<pre><code>func (r *MongoUserRepository) Insert(ctx context.Context, emp *model.User) (*model.User, error)\n</code></pre> <p>Insert will insert an user</p> <p></p>"},{"location":"api/packages/mongodb.html#type-transactioncollectionconfig","title":"type TransactionCollectionConfig","text":"<p>TransactionCollectionConfig will implement mongodb collection functions</p> <pre><code>type TransactionCollectionConfig struct {\n    Tracer          trace.Tracer\n    MongoCollection *mongo.Collection\n}\n</code></pre> <p></p>"},{"location":"api/packages/mongodb.html#func-transactioncollectionconfig-createindexes","title":"func (*TransactionCollectionConfig) CreateIndexes","text":"<pre><code>func (c *TransactionCollectionConfig) CreateIndexes(ctx context.Context, indexes []string) error\n</code></pre> <p>CreateIndexes will create mongodb indexes</p> <p></p>"},{"location":"api/packages/mongodb.html#func-transactioncollectionconfig-deleteone","title":"func (*TransactionCollectionConfig) DeleteOne","text":"<pre><code>func (c *TransactionCollectionConfig) DeleteOne(ctx context.Context, id string) (int64, error)\n</code></pre> <p>DeleteOne will find a Transaction from collection</p> <p></p>"},{"location":"api/packages/mongodb.html#func-transactioncollectionconfig-findone","title":"func (*TransactionCollectionConfig) FindOne","text":"<pre><code>func (c *TransactionCollectionConfig) FindOne(ctx context.Context, id string) (*model.Transaction, error)\n</code></pre> <p>FindOne will find a Transaction from collection</p> <p></p>"},{"location":"api/packages/mongodb.html#func-transactioncollectionconfig-insertone","title":"func (*TransactionCollectionConfig) InsertOne","text":"<pre><code>func (c *TransactionCollectionConfig) InsertOne(ctx context.Context, document interface{}) (id string, err error)\n</code></pre> <p>InsertOne will insert a document into mongodb</p> <p></p>"},{"location":"api/packages/mongodb.html#type-usercollectionconfig","title":"type UserCollectionConfig","text":"<p>UserCollectionConfig will implement mongodb collection functions</p> <pre><code>type UserCollectionConfig struct {\n    Tracer          trace.Tracer\n    MongoCollection *mongo.Collection\n}\n</code></pre> <p></p>"},{"location":"api/packages/mongodb.html#func-usercollectionconfig-createindexes","title":"func (*UserCollectionConfig) CreateIndexes","text":"<pre><code>func (c *UserCollectionConfig) CreateIndexes(ctx context.Context, indexes []string) error\n</code></pre> <p>CreateIndexes will create mongodb indexes</p> <p></p>"},{"location":"api/packages/mongodb.html#func-usercollectionconfig-deleteone","title":"func (*UserCollectionConfig) DeleteOne","text":"<pre><code>func (c *UserCollectionConfig) DeleteOne(ctx context.Context, id string) (int64, error)\n</code></pre> <p>DeleteOne will find a User from collection</p> <p></p>"},{"location":"api/packages/mongodb.html#func-usercollectionconfig-findone","title":"func (*UserCollectionConfig) FindOne","text":"<pre><code>func (c *UserCollectionConfig) FindOne(ctx context.Context, id string) (*model.User, error)\n</code></pre> <p>FindOne will find a User from collection</p> <p></p>"},{"location":"api/packages/mongodb.html#func-usercollectionconfig-findoneby","title":"func (*UserCollectionConfig) FindOneBy","text":"<pre><code>func (c *UserCollectionConfig) FindOneBy(ctx context.Context, login string) (*model.User, error)\n</code></pre> <p>FindOne will find a User from collection</p> <p></p>"},{"location":"api/packages/mongodb.html#func-usercollectionconfig-insertone","title":"func (*UserCollectionConfig) InsertOne","text":"<pre><code>func (c *UserCollectionConfig) InsertOne(ctx context.Context, document interface{}) (id string, err error)\n</code></pre> <p>InsertOne will insert a document into mongodb</p> <p></p>"},{"location":"api/packages/mongodb.html#type-usercollectioninterface","title":"type UserCollectionInterface","text":"<p>UserCollectionInterface defines a mongodb collection API to be posteriorly mocked</p> <pre><code>type UserCollectionInterface interface {\n    CreateIndexes(ctx context.Context, indexes []string) error\n    InsertOne(ctx context.Context, document interface{}) (id string, err error)\n    FindOne(ctx context.Context, id string) (*model.User, error)\n    FindOneBy(ctx context.Context, xd string) (*model.User, error)\n    DeleteOne(ctx context.Context, id string) (int64, error)\n}\n</code></pre> <p></p>"},{"location":"api/packages/mongodb.html#type-usermockcollectionconfig","title":"type UserMockCollectionConfig","text":"<p>UserMockCollectionConfig will implement mongodb collection functions</p> <pre><code>type UserMockCollectionConfig struct {\n    Error error\n}\n</code></pre> <p></p>"},{"location":"api/packages/mongodb.html#func-usermockcollectionconfig-createindexes","title":"func (*UserMockCollectionConfig) CreateIndexes","text":"<pre><code>func (c *UserMockCollectionConfig) CreateIndexes(ctx context.Context, indexes []string) error\n</code></pre> <p>CreateIndexes will create mongodb indexes</p> <p></p>"},{"location":"api/packages/mongodb.html#func-usermockcollectionconfig-deleteone","title":"func (*UserMockCollectionConfig) DeleteOne","text":"<pre><code>func (c *UserMockCollectionConfig) DeleteOne(ctx context.Context, id string) (int64, error)\n</code></pre> <p>DeleteOne will insert a document into mongodb</p> <p></p>"},{"location":"api/packages/mongodb.html#func-usermockcollectionconfig-findone","title":"func (*UserMockCollectionConfig) FindOne","text":"<pre><code>func (c *UserMockCollectionConfig) FindOne(ctx context.Context, id string) (*model.User, error)\n</code></pre> <p>FindOne will find a document based on ID</p> <p></p>"},{"location":"api/packages/mongodb.html#func-usermockcollectionconfig-findoneby","title":"func (*UserMockCollectionConfig) FindOneBy","text":"<pre><code>func (c *UserMockCollectionConfig) FindOneBy(ctx context.Context, login string) (*model.User, error)\n</code></pre> <p>FindOneBy will find a document based on field</p> <p></p>"},{"location":"api/packages/mongodb.html#func-usermockcollectionconfig-insertone","title":"func (*UserMockCollectionConfig) InsertOne","text":"<pre><code>func (c *UserMockCollectionConfig) InsertOne(ctx context.Context, document interface{}) (id string, err error)\n</code></pre> <p>InsertOne will insert a document into mongodb</p> <p>Generated by gomarkdoc</p>"},{"location":"api/packages/observability.html","title":"Observability","text":""},{"location":"api/packages/observability.html#observability","title":"observability","text":"<pre><code>import \"budget-tracker-api-v2/internal/observability\"\n</code></pre>"},{"location":"api/packages/observability.html#index","title":"Index","text":"<ul> <li>func InitTracer(ctx context.Context) func(context.Context) error</li> <li>type DefaultTracerProvider</li> <li>func (d *DefaultTracerProvider) Tracer(name string) trace.Tracer</li> <li>type TracerProvider</li> </ul>"},{"location":"api/packages/observability.html#func-inittracer","title":"func InitTracer","text":"<pre><code>func InitTracer(ctx context.Context) func(context.Context) error\n</code></pre> <p>InitTracer will init Tracer globally</p> <p></p>"},{"location":"api/packages/observability.html#type-defaulttracerprovider","title":"type DefaultTracerProvider","text":"<pre><code>type DefaultTracerProvider struct{}\n</code></pre>"},{"location":"api/packages/observability.html#func-defaulttracerprovider-tracer","title":"func (*DefaultTracerProvider) Tracer","text":"<pre><code>func (d *DefaultTracerProvider) Tracer(name string) trace.Tracer\n</code></pre>"},{"location":"api/packages/observability.html#type-tracerprovider","title":"type TracerProvider","text":"<pre><code>type TracerProvider interface {\n    Tracer(name string) trace.Tracer\n}\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"api/packages/repository.html","title":"Repository","text":""},{"location":"api/packages/repository.html#repository","title":"repository","text":"<pre><code>import \"budget-tracker-api-v2/internal/repository\"\n</code></pre>"},{"location":"api/packages/repository.html#index","title":"Index","text":"<ul> <li>type CardCollectionInterface</li> <li>type CardRepoInterface</li> <li>type HealthCollectionInterface</li> <li>type TransactionCollectionInterface</li> <li>type TransactionRepoInterface</li> <li>type UserCollectionInterface</li> <li>type UserRepoInterface</li> </ul>"},{"location":"api/packages/repository.html#type-cardcollectioninterface","title":"type CardCollectionInterface","text":"<p>CardCollectionInterface defines a mongodb collection API to be posteriorly mocked</p> <pre><code>type CardCollectionInterface interface {\n    CreateIndexes(ctx context.Context, indexes []string) error\n    InsertOne(ctx context.Context, document interface{}) (id string, err error)\n    FindOne(ctx context.Context, id string) (*model.Card, error)\n    DeleteOne(ctx context.Context, id string) (int64, error)\n}\n</code></pre> <p></p>"},{"location":"api/packages/repository.html#type-cardrepointerface","title":"type CardRepoInterface","text":"<p>CardRepoInterface defines Card CRUD operations</p> <pre><code>type CardRepoInterface interface {\n    Insert(ctx context.Context, emp *model.Card) (*model.Card, error)\n    FindByID(ctx context.Context, empID string) (*model.Card, error)\n    Delete(ctx context.Context, id string) (int64, error)\n}\n</code></pre> <p></p>"},{"location":"api/packages/repository.html#type-healthcollectioninterface","title":"type HealthCollectionInterface","text":"<p>UserCollectionInterface defines a mongodb collection API to be posteriorly mocked</p> <pre><code>type HealthCollectionInterface interface {\n    Ping(ctx context.Context) (bool, error)\n}\n</code></pre> <p></p>"},{"location":"api/packages/repository.html#type-transactioncollectioninterface","title":"type TransactionCollectionInterface","text":"<p>TransactionCollectionInterface defines a mongodb collection API to be posteriorly mocked</p> <pre><code>type TransactionCollectionInterface interface {\n    CreateIndexes(ctx context.Context, indexes []string) error\n    InsertOne(ctx context.Context, document interface{}) (id string, err error)\n    FindOne(ctx context.Context, id string) (*model.Transaction, error)\n    DeleteOne(ctx context.Context, id string) (int64, error)\n}\n</code></pre> <p></p>"},{"location":"api/packages/repository.html#type-transactionrepointerface","title":"type TransactionRepoInterface","text":"<p>TransactionRepoInterface defines Card CRUD operations</p> <pre><code>type TransactionRepoInterface interface {\n    Insert(ctx context.Context, emp *model.Transaction) (*model.Transaction, error)\n    FindByID(ctx context.Context, empID string) (*model.Transaction, error)\n    Delete(ctx context.Context, id string) (int64, error)\n}\n</code></pre> <p></p>"},{"location":"api/packages/repository.html#type-usercollectioninterface","title":"type UserCollectionInterface","text":"<p>UserCollectionInterface defines a mongodb collection API to be posteriorly mocked</p> <pre><code>type UserCollectionInterface interface {\n    CreateIndexes(ctx context.Context, indexes []string) error\n    InsertOne(ctx context.Context, document interface{}) (id string, err error)\n    FindOne(ctx context.Context, id string) (*model.User, error)\n    FindOneBy(ctx context.Context, login string) (*model.User, error)\n    DeleteOne(ctx context.Context, id string) (int64, error)\n}\n</code></pre> <p></p>"},{"location":"api/packages/repository.html#type-userrepointerface","title":"type UserRepoInterface","text":"<p>UserRepoInterface defines User CRUD operations</p> <pre><code>type UserRepoInterface interface {\n    Insert(ctx context.Context, emp *model.User) (*model.User, error)\n    FindByID(ctx context.Context, empID string) (*model.User, error)\n    Delete(ctx context.Context, id string) (int64, error)\n}\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"api/packages/router.html","title":"Router","text":""},{"location":"api/packages/router.html#router","title":"router","text":"<pre><code>import \"budget-tracker-api-v2/internal/http/router\"\n</code></pre>"},{"location":"api/packages/router.html#index","title":"Index","text":"<ul> <li>func NewRouter(tracer trace.Tracer, userCollectionInterface repository.UserCollectionInterface, cardsCollectionInterface repository.CardCollectionInterface, transactionsCollectionInterface repository.TransactionCollectionInterface, healthCollectionInterface repository.HealthCollectionInterface) (*mux.Router, error)</li> </ul>"},{"location":"api/packages/router.html#func-newrouter","title":"func NewRouter","text":"<pre><code>func NewRouter(tracer trace.Tracer, userCollectionInterface repository.UserCollectionInterface, cardsCollectionInterface repository.CardCollectionInterface, transactionsCollectionInterface repository.TransactionCollectionInterface, healthCollectionInterface repository.HealthCollectionInterface) (*mux.Router, error)\n</code></pre> <p>NewRouter will set new User Routes</p> <p>Generated by gomarkdoc</p>"},{"location":"ci/running_tests_locally.html","title":"Running tests","text":""},{"location":"ci/running_tests_locally.html#running-your-ci-locally","title":"Running your CI locally","text":"<p>If you want to simply run every static tests to your repository, you can type the following command <code>make test</code>.</p> <pre><code>make test\n</code></pre> <p>This command will run the following tests:</p> <ul> <li><code>staticcheck</code><ul> <li>Static analysis for Go</li> </ul> </li> <li><code>gotest</code><ul> <li>Unit testing for Go</li> </ul> </li> <li><code>shellcheck</code><ul> <li>Lint for shellscripts</li> </ul> </li> <li><code>helm-unittest</code><ul> <li>Unit test for local chart's manifests generation</li> </ul> </li> </ul>"},{"location":"ci/running_tests_locally.html#running-your-ci-remotely","title":"Running your CI remotely","text":"<p>Using Github actions, all tests for CI will run automatically to branch <code>main</code> or for every pull requests with any of those prefixes as it's branch:</p> <ul> <li><code>feat/*</code></li> <li><code>docs/*</code></li> <li><code>break/*</code></li> <li><code>fix/*</code></li> </ul> <p></p>"},{"location":"development/local_development.html","title":"Getting started","text":""},{"location":"development/local_development.html#getting-started","title":"Getting started","text":"<p>This guide will help you to: build, run and observe <code>budget-tracker-api</code> locally for development purposes.</p>"},{"location":"development/local_development.html#requisites","title":"Requisites","text":"<ul> <li> Operational System<ul> <li> Linux</li> <li> Unix (MacOS)</li> <li> Windows</li> </ul> </li> <li> Binaries and requisites needed<ul> <li> Docker Desktop / Rancher Desktop</li> <li> <code>docker</code> and <code>docker-compose</code> binaries</li> <li> git</li> <li> Python 3.x </li> <li> Golang 1.25+</li> </ul> </li> <li> External requisites<ul> <li> MongoDB Atlas database - (Optional)</li> <li> Github - for Github actions usage</li> </ul> </li> </ul>"},{"location":"development/local_development.html#fetching-the-code","title":"Fetching the code","text":"<p>First things first, ensure you have the latest code-base fetched:</p> <pre><code># Feel free to use SSH instead of HTTPS\ngit clone https://github.com/vsantos/budget-tracker-api-v2\n</code></pre> <p>This command will create a local directory called <code>budget-tracker-api-v2</code> with the source code within.</p>"},{"location":"development/local_development.html#running-the-code-locally","title":"Running the code locally","text":"<p>In this section, let's explore how you can run the platform locally with or without using container images.</p>"},{"location":"development/local_development.html#without-containers","title":"Without containers","text":"<p>If you don't have/want any container engines running the app, you can build and run the platform by following these steps:</p> ShellShell outcome <pre><code>cd budget-tracker-api-v2\n\n# Ensure you have successfully `cd`ed to the correct directory by running:\npwd\n</code></pre> <pre><code>/Users/${my-user}/Code/budget-tracker-api-v2\n</code></pre> ShellShell outocome <pre><code>ls\n</code></pre> <pre><code>CHECKLIST.md            Dockerfile          go.sum              LICENSE             otel-collector-config.yaml  swagger\ndocker              docs                hack                main.go             README.md\ndocker-compose.yml      go.mod              internal            Makefile            sonar-project.properties\n</code></pre>"},{"location":"development/local_development.html#building-and-running-your-app","title":"building and running your app","text":"<p>Since our app was written in <code>go</code>, we will use the binary to compile the locally:</p> Shell <pre><code># Install the needed dependencies:\ngo mod tidy\n\n# Build the binary\ngo build . -o budget-tracker\n</code></pre> <p>This command - if successful - will generate a local binary called <code>budget-tracker</code>.</p> <p>Now, you can simply run it:</p> Shell <pre><code># This command will make your binary \"runnable\"\nchmod +x budget-tracker\n\n# Finally, run the binary\n./budget-tracker-api\n</code></pre> <p>Ops! The app wasn't able to run, according to it's message</p> <pre><code>{\n    \"level\":\"fatal\",\n    \"msg\":\"empty MONGODB_HOST, MONGODB_USER or MONGODB_PASS env vars for mongodb\",\n    \"time\":\"2025-10-13T13:24:46-03:00\"\n}\n</code></pre> <p>The only external dependency for this application is a MongoDB database, as shown on the architecture page. This means we need to provide a functional MongoDB instance to the application\u2014either locally (e.g., through a container) or externally (e.g., via Atlas).</p>"},{"location":"development/local_development.html#setting-up-an-external-mongodb","title":"Setting up an external MongoDB","text":"<p>If you don't want to run a local MongoDB instance, you can use Atlas' one since they offer a free-tier. You will endup having a mongodb instance along with credentials, make sure you are able to access before you pointing the app to it.</p> <p></p> <p>You can achieve this goal by either running MongoDB Compass or MongoDB CLI <code>mongosh</code>.</p> <p>If you try to pass a fake host or a non-existent MongoDB URL, the app will fail to start.</p> <p>Here\u2019s an example of a functional command that passes environment variables:</p> <pre><code># This command will pass environment variables directly\n## to your application's process\n\nMONGODB_HOST=\"mongodb+srv://my-mongodb-atlas-url.mongodb.net\" \\\nMONGODB_USER=\"user\" \\\nMONGODB_PASS=\"pass\" \\\n./budget-tracker-api\n</code></pre> <p>You could also export these variables globally but for simplicity we are not using this option for now:</p> Shell <pre><code>export MONGODB_HOST=\"mongodb+srv://my-mongodb-atlas-url.mongodb.net\" \\\nexport MONGODB_USER=\"user\" \\\nexport MONGODB_PASS=\"pass\"\n</code></pre> Shell <pre><code>./budget-tracker-api\n</code></pre>"},{"location":"development/local_development.html#dealing-with-mongodbs-dependency","title":"Dealing with MongoDB's dependency","text":"<p>Let\u2019s take this chance (if you haven\u2019t set up your MongoDB Atlas instance yet) to grab your credentials from Atlas and run the app for the first time. Just replace the environment variable values in your command:</p> Shell <pre><code>MONGODB_HOST=\"mongodb+srv://my-example.fj2qq.mongodb.net/\" \\\nMONGODB_USER=\"my-user\" \\\nMONGODB_PASS=\"my-pass\" \\\n./budget-tracker-api\n</code></pre> <p>You should expect then the following outcome</p> <pre><code>{\"level\":\"info\",\"msg\":\"Server running on :8080\",\"time\":\"2025-10-13T13:42:04-03:00\"}\n</code></pre> <p>Now, we can simply test it locally by running a simple <code>curl</code> command:</p> Shell <pre><code># According to the app logs, the platform is running under port `8080`\n## According to the swagger, we can check there is a `/health` endpoint\n\ncurl http://localhost:8080/health\n</code></pre> <p>This is the expected outcome</p> <pre><code>{\n    \"message\": \"healthy\",\n    \"app\": true,\n    \"database\": true\n}\n</code></pre> <p>This means we made a request to our app, which validated if it's connection with MongoDB is working properly. This endpoint is particularly useful when you have High-Availability mechanisms such as Kubernetes' healthcheck.</p>"},{"location":"development/local_development.html#with-containers","title":"With containers","text":"<p>You can simply (at the root of your directory) trigger the <code>docker-compose</code> manually or through the <code>Makefile</code> command <code>make rebuild</code>:</p> <p>Make sure you edit the file <code>docker-compose</code> at the root of your directory to make sure to pass mongodb's credentials:</p> docker-compose.yml <pre><code>  budger-tracker-api-v2:\n    build: ./\n    container_name: budger-tracker-api-v2\n    environment:\n      MONGODB_HOST: \"mongodb+srv://&lt;REPLACE_ME&gt;/\"\n      MONGODB_USER: \"&lt;REPLACE_ME&gt;\"\n      MONGODB_PASS: \"&lt;REPLACE_ME&gt;\"\n</code></pre> <p>don't persist your credentials to git</p> <p>This file is ignored by <code>.gitconfig</code> so if you accidentally save those credentails, no changes will be known by your <code>git</code> process.</p> ShellShell outcome <pre><code># Manually bootstrapping all containers at once in background:\ndocker-compose up -d\n\n# through Makefile. Prefered over the \"manual docker-compose\" to allow faster\n## local development interactions \nmake rebuild\n</code></pre> <pre><code>[+] Running 4/4\n\u2714 Network budget-tracker-api-v2_otel-network  Created                                                  0.0s \n\u2714 Container jaeger                            Started                                                  0.2s \n\u2714 Container otel-collector                    Started                                                  0.3s \n\u2714 Container budger-tracker-api-v2             Started                                                  0.3s\n</code></pre> <p>All regular containers - including observability ones - will be up and running except MongoDB's container.</p> <p>We can use the same approach as running \"without containers\" to validate app's health:</p> Shell <pre><code># According to the app logs, the platform is running under port `8080`\n## According to the swagger, we can check there is a `/health` endpoint\n\ncurl http://localhost:8080/health\n</code></pre> <p>This is the expected outcome</p> <pre><code>{\n    \"message\": \"healthy\",\n    \"app\": true,\n    \"database\": true\n}\n</code></pre>"},{"location":"development/local_development.html#dealing-with-mongodbs-dependency_1","title":"Dealing with MongoDB's dependency","text":"<p>If you won't want to deal with an external mongoDB but to test with a local one instead. We will be missing the details step-by-step for now but you can simply create a local mongoDB and point the correct <code>localhost:27017</code>:</p> docker-compose.yml <pre><code>  budger-tracker-api-v2:\n    build: ./\n    container_name: budger-tracker-api-v2\n    environment:\n      MONGODB_HOST: \"mongodb+srv://localhost:27017/\"\n      MONGODB_USER: \"&lt;REPLACE_ME&gt;\"\n      MONGODB_PASS: \"&lt;REPLACE_ME&gt;\"\n</code></pre>"},{"location":"development/local/chart_readme.html","title":"Configuration options","text":""},{"location":"development/local/chart_readme.html#budget-tracker-api","title":"budget-tracker-api","text":"<p>A Helm chart for budget-tracker-api platform</p>"},{"location":"development/local/chart_readme.html#requirements","title":"Requirements","text":"Repository Name Version https://charts.bitnami.com/bitnami mongodb 15.6.26"},{"location":"development/local/chart_readme.html#values","title":"Values","text":"Key Type Default Description affinity object <code>{}</code> autoscaling.enabled bool <code>true</code> autoscaling.maxReplicas int <code>3</code> autoscaling.minReplicas int <code>2</code> autoscaling.targetCPUUtilizationPercentage int <code>80</code> autoscaling.targetMemoryUtilizationPercentage int <code>80</code> fullnameOverride string <code>\"\"</code> image.pullPolicy string <code>\"IfNotPresent\"</code> image.repository string <code>\"budget-tracker-api\"</code> image.tag string <code>\"local\"</code> imagePullSecrets list <code>[]</code> livenessProbe.httpGet.path string <code>\"/health\"</code> livenessProbe.httpGet.port int <code>8080</code> mongodb.architecture string <code>\"standalone\"</code> mongodb.auth.database string <code>\"budget-tracker-api-v2\"</code> mongodb.auth.enabled bool <code>true</code> mongodb.auth.password string <code>\"example\"</code> mongodb.auth.rootPassword string <code>\"root\"</code> mongodb.auth.rootUser string <code>\"root\"</code> mongodb.auth.username string <code>\"admin\"</code> mongodb.enabled bool <code>false</code> mongodb.image.repository string <code>\"bitnami/mongodb\"</code> mongodb.image.tag string <code>\"latest\"</code> mongodb.namespace string <code>\"mongodb\"</code> mongodb.persistence.enabled bool <code>false</code> mongodb.persistence.namespaceOverride string <code>\"mongodb\"</code> mongodb.sidecars[0].command[0] string <code>\"/bin/sh\"</code> mongodb.sidecars[0].command[1] string <code>\"-c\"</code> mongodb.sidecars[0].command[2] string <code>\"echo \\\"Waiting for MongoDB to start...\\\"\\nuntil mongosh --host localhost --port 27017 --eval \\\"db.adminCommand('ping')\\\" &amp;&gt;/dev/null; do\\n  sleep 2\\ndone\\necho \\\"Injecting initial user data...\\\"\\necho '\\n[\\n    {\\n        \\\"_id\\\": {\\n            \\\"$oid\\\": \\\"5143afc66d44e1ceb372121e\\\"\\n        },\\n        \\\"login\\\": \\\"admin\\\",\\n        \\\"firstname\\\": \\\"Temporary\\\",\\n        \\\"lastname\\\": \\\"Seeded User\\\",\\n        \\\"email\\\": \\\"admin@domain.com\\\",\\n        \\\"salted_password\\\": \\\"$2a$10$HOrmuqyfwr575K4P9tjQXe0QKqbddMA/KFZ.YZhWVKPLMUF3LS4gi\\\",\\n        \\\"created_at\\\": {\\\"$date\\\": \\\"1994-05-03T17:58:16.530+00:00\\\"}\\n    }\\n  ]' &gt; /tmp/init.json\\n\\nmongoimport \\\\\\n    --db budget-tracker-v2 \\\\\\n    --host \\\"local-dev-mongodb:27017\\\" \\\\\\n    --username root \\\\\\n    --password root \\\\\\n    --collection users \\\\\\n    --type json \\\\\\n    --file /tmp/init.json \\\\\\n    --authenticationDatabase=admin \\\\\\n    --jsonArray \\\\\\n    --mode upsert\\n\\n  echo \\\"Done seeding, sleeping forever...\\\"\\n  tail -f /dev/null\\n\"</code> mongodb.sidecars[0].image string <code>\"bitnami/mongodb:latest\"</code> mongodb.sidecars[0].lifecycle.postStart.exec.command[0] string <code>\"/bin/true\"</code> mongodb.sidecars[0].name string <code>\"seed-data\"</code> nameOverride string <code>\"\"</code> namespace.enabled bool <code>true</code> namespace.name string <code>\"demo\"</code> nodeSelector object <code>{}</code> podAnnotations object <code>{}</code> podLabels object <code>{}</code> podSecurityContext object <code>{}</code> readinessProbe.httpGet.path string <code>\"/health\"</code> readinessProbe.httpGet.port int <code>8080</code> replicaCount int <code>2</code> resources object <code>{}</code> securityContext object <code>{}</code> service.port int <code>8080</code> service.type string <code>\"LoadBalancer\"</code> tolerations list <code>[]</code> volumeMounts list <code>[]</code> volumes[0].name string <code>\"mongodb\"</code> volumes[0].secret.optional bool <code>false</code> volumes[0].secret.secretName string <code>\"mongodb-credentials\"</code> <p>Autogenerated from chart metadata using helm-docs v1.14.2</p>"},{"location":"development/local/chart_usage.html","title":"Usage","text":""},{"location":"development/local/chart_usage.html#helm-chart","title":"Helm chart","text":"<p>This app can be installed as a \"helm chart\" for Kubernetes' environments.</p>"},{"location":"development/local/chart_usage.html#generating-manifests","title":"Generating manifests","text":"<p>In order to do it so, you can generate the manifests locally through:</p> <pre><code>helm template --release-name local-dev ./helm/budget-tracker &gt; manifests.yaml\n\ncat manifests.yaml\n</code></pre>"},{"location":"development/local/chart_usage.html#deploying-manifests","title":"Deploying manifests","text":"<p>After inspecting and validating those manifests, they can be applied through:</p> <pre><code>kubectl apply -f manifests.yaml\n</code></pre>"},{"location":"development/local/chart_usage.html#testing-manifests","title":"Testing manifests","text":"<p>You can run <code>helm-unittest</code> to validate budget-tracker's chart:</p> <pre><code>make helm-test\n</code></pre>"},{"location":"development/local/makefile.html","title":"Makefile abstraction","text":""},{"location":"development/local/makefile.html#makefile-abstraction","title":"Makefile abstraction","text":"<p>To get the development process smoother, we can rely on Makefile abstract for some often-used commands:</p>"},{"location":"development/local/makefile.html#example-of-most-used-commands","title":"Example of most used commands","text":""},{"location":"development/local/makefile.html#for-serving-mkdocs","title":"For serving mkdocs","text":"<pre><code>make serve-docs\n</code></pre>"},{"location":"development/local/makefile.html#for-testing","title":"For Testing","text":"<pre><code>make test\n</code></pre>"},{"location":"development/local/makefile.html#for-deploying-with-docker-compose","title":"For Deploying with docker-compose","text":"<pre><code>make rebuild\n</code></pre>"},{"location":"development/local/makefile.html#all-makefiles-targets","title":"All Makefile's targets","text":"<p>Refer to the current Makefile to validate all options: </p><pre><code>sonar:\n    docker run -d -p 9000:9000 sonarqube:community &amp;&amp; sleep 60\n    docker run --net=host \\\n        --rm \\\n        -e SONAR_HOST_URL=\"http://localhost:9000\"  \\\n        -v \"$(pwd):/usr/src\" \\\n        sonarsource/sonar-scanner-cli\n\nstatic-docker-build:\n    docker build . -t budget-tracker-api:local\n\ntest:\n    shellcheck hack/docs/generate_api_docs.sh\n    staticcheck -checks='-S1021' ./...\n    go test ./... -cover -coverprofile=coverage.out \n    $(MAKE) helm-test\n    shellcheck hack/docs/generate_api_docs.sh\n\nhelm-test:\n    helm unittest -f helm/budget-tracker/templates/tests/deployment_test.yaml helm/budget-tracker --failfast --color\n    helm unittest -f helm/budget-tracker/templates/tests/service_test.yaml helm/budget-tracker --failfast --color\n    helm unittest -f helm/budget-tracker/templates/tests/secret_test.yaml helm/budget-tracker --failfast --color\n    helm unittest -f helm/budget-tracker/templates/tests/hpa_test.yaml helm/budget-tracker --failfast --color\n    helm unittest -f helm/budget-tracker/templates/tests/namespace_test.yaml helm/budget-tracker --failfast --color\n\nhelm-docs:\n    helm-docs helm/budget-tracker/\n\nrebuild:\n    $(MAKE) helm-test\n    docker-compose down; docker-compose up -d --build\n\nrebuild-standalone:\n    $(MAKE) helm-test\n    docker-compose -f docker-compose-standalone.yml down; docker-compose -f docker-compose-standalone.yml up -d --build\n\nk8s-apply:\n    if [[ -f helm/budget-tracker/Chat.lock ]]; then rm helm/budget-tracker/Chart.lock; fi\n    $(MAKE) helm-test\n    $(MAKE) helm-docs\n    helm repo add bitnami https://charts.bitnami.com/bitnami\n    helm repo update\n    helm dependency build helm/budget-tracker\n    helm template --release-name local-dev ./helm/budget-tracker | kubectl apply -f -\n    if [[ -f helm/budget-tracker/Chart.lock ]]; then rm helm/budget-tracker/Chart.lock; fi\n\nk8s-destroy:\n    if [[ -f helm/budget-tracker/Chat.lock ]]; then rm helm/budget-tracker/Chart.lock; fi\n    helm repo add bitnami https://charts.bitnami.com/bitnami\n    helm repo update\n    helm dependency build helm/budget-tracker\n    helm template --release-name local-dev ./helm/budget-tracker | kubectl delete -f -\n    if [[ -f helm/budget-tracker/Chart.lock ]]; then rm helm/budget-tracker/Chart.lock; fi\n\ngenerate-docs:\n    $(MAKE) helm-test\n    $(MAKE) helm-docs\n    ./hack/docs/generate_api_docs.sh\n\nserve-docs:\n    $(MAKE) generate-docs\n    $(MAKE) helm-docs\n    mkdocs serve -f docs/mkdocs.yml\n</code></pre><p></p>"},{"location":"development/local/requisites.html","title":"Requisites","text":""},{"location":"development/local/requisites.html#getting-started","title":"Getting started","text":"<p>This guide will help you to: build, run and observe <code>budget-tracker-api</code> locally for development purposes.</p>"},{"location":"development/local/requisites.html#requisites","title":"Requisites","text":"<ul> <li> Operational System<ul> <li> Linux</li> <li> Unix (MacOS)</li> <li> Windows</li> </ul> </li> <li> Binaries and requisites needed<ul> <li> Docker Desktop / Rancher Desktop</li> <li> <code>docker</code> and <code>docker-compose</code> binaries</li> <li> make (for <code>Makefile</code> usage)</li> <li> git</li> <li> curl (for local testing)</li> <li> Python 3.x</li> <li> Golang 1.25+</li> <li> staticcheck</li> <li> shellcheck</li> </ul> </li> <li> Kubernetes local requisites<ul> <li> <code>kind</code></li> <li> <code>kubectl</code></li> <li> <code>kubectx</code></li> <li> <code>helm</code> <code>v3+</code></li> <li> <code>helm-unittest</code></li> <li> <code>helm-docs</code></li> </ul> </li> <li> External requisites<ul> <li> Github setup - for Github actions usage</li> </ul> </li> <li> Mongo's External requisites<ul> <li> MongoDB Atlas database - (Optional)</li> <li> <code>mongosh</code> (Optional)</li> <li> MongoDB Compass</li> </ul> </li> </ul>"},{"location":"development/local/requisites.html#fetching-the-code","title":"Fetching the code","text":"<p>First things first, ensure you have the latest code-base fetched:</p> <pre><code># Feel free to use SSH instead of HTTPS\ngit clone https://github.com/vsantos/budget-tracker-api-v2\n</code></pre> <p>This command will create a local directory called <code>budget-tracker-api-v2</code> with the source code within.</p>"},{"location":"development/local/requisites.html#setting-up-an-external-mongodb-optional","title":"Setting up an external MongoDB (Optional)","text":"<p>If you don't want to run a local MongoDB instance, you can use Atlas' one since they offer a free-tier. You will endup having a mongodb instance along with credentials, make sure you are able to access before you pointing the app to it.</p> <p></p> <p>You can achieve this goal by either running MongoDB Compass or MongoDB CLI <code>mongosh</code>.</p>"},{"location":"development/local/run_with_containers.html","title":"With containers","text":""},{"location":"development/local/run_with_containers.html#running-the-code-locally","title":"Running the code locally","text":"<p>In this section, let's explore how you can run the platform locally using container images.</p> <p>Running with or without containers?</p> <p>My personal preference is to always work with containers for everything. My advice is to go through the documentation on \u201crunning without containers,\u201d but in the end, stick with using containers.</p>"},{"location":"development/local/run_with_containers.html#with-containers","title":"With containers","text":"<p>You can simply (at the root of your directory) trigger the <code>docker-compose</code> manually or through the <code>Makefile</code> command <code>make rebuild-standalone</code>. Differently from <code>make rebuild</code>, the <code>make rebuild-standalone</code> command will also spin up a local mongoDB container with a single user already created.</p> <p>The created user is a static one, injected to your container automatically to allow fast getting-started.</p> <p>initial credential</p> <p>The best practice even for this scenario is to consult app's <code>swagger</code> and create a new user, deleting the <code>admin</code> one afterwards. This is needed to ensure you have an user for testing other protected endpoints, such as cards creation.</p> <p>To use the initial credential, simply pass the following body when requesting a new JWT Token:</p> 'Request new token's body <pre><code>{\n    \"login\": \"admin\",\n    \"password\": \"myrandompassword\"\n}\n</code></pre> <p>Example:</p> ShellShell outcome <pre><code>curl --request POST \\\n  --url http://localhost:8080/api/v1/jwt/issue \\\n  --header 'Content-Type: application/json' \\\n  --header 'User-Agent: my-manual-requester' \\\n  --data '{\n    \"login\": \"admin\",\n    \"password\": \"myrandompassword\"\n  }'\n</code></pre> <pre><code>{\n  \"type\":\"bearer\",\n  \"refresh\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NjA0OTYxNjEsInN1YiI6IjUxNDNhZmM2NmQ0NGUxY2ViMzcyMTIxZSJ9.i8NntpiR5w6LiALRxpxvkTtFROTA2EWTYkcuieYXRuQ\",\n  \"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJleHAiOjE3NjA0MTAwNjEsImlhdCI6MTc2MDQwOTc2MSwibmFtZSI6ImFkbWluIiwic3ViIjoiNTE0M2FmYzY2ZDQ0ZTFjZWIzNzIxMjFlIn0.nX6Tug6FMInA02evdGcHOlr1AHoNe9usi-sr-cOYhJw\"\n}\n</code></pre> ShellShell outcome <pre><code># Manually bootstrapping all containers at once in background:\ndocker-compose -f docker-compose-standalone.yml up -d\n\n# through Makefile. Prefered over the \"manual docker-compose\" to allow faster\n## local development interactions \nmake rebuild-standalone\n</code></pre> <pre><code>[+] Running 9/9 \n\u2714 otel-collector                                Built    0.0s\n\u2714 mongo_seed                                    Built    0.0s\n\u2714 Network budget-tracker-api-v2_otel-network    Created  0.0s\n\u2714 Container jaeger                              Started  0.2s\n\u2714 Container mongodb                             Started  0.2s\n\u2714 Container otel-collector                      Started  0.3s\n\u2714 Container budger-tracker-api-v2               Started  0.3s\n\u2714 Container budget-tracker-api-v2-mongo_seed-1  Started  0.3s\n</code></pre> <p>All regular containers - including observability ones - will be up and running, making all infrastructure-stack transparent.</p> <p>We can use the same approach as running \"without containers\" to validate app's health:</p> Shell <pre><code># According to the app logs, the platform is running under port `8080`\n## According to the swagger, we can check there is a `/health` endpoint\n\ncurl http://localhost:8080/health\n</code></pre> <p>This is the expected outcome</p> <pre><code>{\n    \"message\": \"healthy\",\n    \"app\": true,\n    \"database\": true\n}\n</code></pre>"},{"location":"development/local/run_with_containers.html#dealing-with-mongodbs-dependency","title":"Dealing with MongoDB's dependency","text":"<p>If you won't want to deal with an external mongoDB instead of a local, simply override the original <code>docker-compose</code> file and use <code>make rebuild</code> instead of <code>make rebuild-standalone</code>.</p> docker-compose.yml <pre><code>  budger-tracker-api-v2:\n    build: ./\n    container_name: budger-tracker-api-v2\n    environment:\n      MONGODB_HOST: \"mongodb+srv://my-mongodb-atlas-host.mongodb.net/\"\n      MONGODB_USER: \"&lt;REPLACE_ME&gt;\"\n      MONGODB_PASS: \"&lt;REPLACE_ME&gt;\"\n</code></pre>"},{"location":"development/local/run_with_kubernetes.html","title":"Runbook","text":""},{"location":"development/local/run_with_kubernetes.html#running-the-code-within-a-local-kubernetes-cluster","title":"Running the code within a local Kubernetes cluster","text":"<p>In this section, let's explore how you can run the platform locally using a Kubernetes cluster.</p> <p>Recommended</p> <p>Personally, I do recommend using this method at least once before you commit your changes. Developing without k8s it will be faster but training kubernetes' mechanisms is a must nowadays. Also, we will validate it's charts as well.</p> <p>There are many ways of creating a local kubernetes cluster: <code>kind</code>, <code>minikube</code>, <code>k3s</code>, etc. For the sake of simplity, we recommend the usage of <code>kind</code>, the only requisite is to have a container engine installed; since <code>kind</code> creates a kubernetes cluster by bootstraping containers.</p>"},{"location":"development/local/run_with_kubernetes.html#create-a-local-k8s-cluster","title":"Create a local k8s cluster","text":"<p>By running the following <code>kind</code> command, you will create a functional k8s cluster named <code>budget-tracker-cluster</code>:</p> Shell <pre><code>kind create cluster --name budget-tracker-cluster\n</code></pre> Shell output <pre><code>Creating cluster \"budget-tracker-cluster\" ...\n\u2713 Ensuring node image (kindest/node:v1.34.0) \ud83d\uddbc\n\u2713 Preparing nodes \ud83d\udce6\n\u2713 Writing configuration \ud83d\udcdc\n\u2713 Starting control-plane \ud83d\udd79\ufe0f\n\u2713 Installing CNI \ud83d\udd0c\n\u2713 Installing StorageClass \ud83d\udcbe\nSet kubectl context to \"kind-budget-tracker-cluster\"\nYou can now use your cluster with:\n\nkubectl cluster-info --context kind-budget-tracker-cluster\n\nNot sure what to do next? \ud83d\ude05  Check out https://kind.sigs.k8s.io/docs/user/quick-start/\n</code></pre> <p>A local cluster using the current latest k8s' version was created and be accessed through it's local API server. You can run simply a <code>kubectl</code> command to validate clusters' health:</p> Shell <pre><code>kind cluster-info --context kind-budget-tracker-cluster\n</code></pre> Shell output <pre><code>kubectl cluster-info\nKubernetes control plane is running at https://127.0.0.1:50789\nCoreDNS is running at https://127.0.0.1:50789/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy\n\nTo further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.\n</code></pre> <p>All set!</p> <p>If you are able to reach your local k8s cluster, you can proceed by deployment the app to k8s.</p>"},{"location":"development/local/run_with_kubernetes.html#build-your-locals-container-image","title":"Build your local's container image","text":"<p>To actually deploy some app in k8s, you will need a container image. Since there is an existent <code>Dockerfile</code> at the root of your directory, you can simply build a local image containing your local changes. The suggestion is to name your image as <code>budget-tracker-api:local</code> for the sake of tutorial but once you master the process, feel free to use your own process/name/tags/etc.</p> ShellShell output <pre><code># You can either use the manual command\n## `docker build . -t budget-tracker-api:local`\n## or with the abstraction `make static-docker-build`\nmake static-docker-build\n</code></pre> <pre><code>docker build . -t budget-tracker-api:local\n[+] Building 7.1s (18/18) FINISHED                                                                                                                       docker:desktop-linux\n=&gt; [internal] load build definition from Dockerfile                                                                                                                     0.0s\n=&gt; =&gt; transferring dockerfile: 447B                                                                                                                                     0.0s\n=&gt; [internal] load metadata for gcr.io/distroless/base-debian10:latest                                                                                                  1.4s\n=&gt; [internal] load metadata for docker.io/library/golang:1.25-alpine                                                                                                    1.4s\n=&gt; [auth] library/golang:pull token for registry-1.docker.io                                                                                                            0.0s\n=&gt; [internal] load .dockerignore                                                                                                                                        0.0s\n=&gt; =&gt; transferring context: 2B                                                                                                                                          0.0s\n=&gt; [builder 1/7] FROM docker.io/library/golang:1.25-alpine@sha256:ecb803821dbac0983b03a516adb8407b7dbadfb8771434dc5162a7c471dd27a2                                      0.0s\n=&gt; =&gt; resolve docker.io/library/golang:1.25-alpine@sha256:ecb803821dbac0983b03a516adb8407b7dbadfb8771434dc5162a7c471dd27a2                                              0.0s\n=&gt; [stage-1 1/4] FROM gcr.io/distroless/base-debian10:latest@sha256:101798a3b76599762d3528635113f0466dc9655ecba82e8e33d410e2bf5cd319                                    0.0s\n=&gt; =&gt; resolve gcr.io/distroless/base-debian10:latest@sha256:101798a3b76599762d3528635113f0466dc9655ecba82e8e33d410e2bf5cd319                                            0.0s\n=&gt; [internal] load build context                                                                                                                                        0.1s\n=&gt; =&gt; transferring context: 192.00kB                                                                                                                                    0.1s\n=&gt; CACHED [builder 2/7] RUN apk add --no-cache git ca-certificates                                                                                                      0.0s\n=&gt; CACHED [builder 3/7] WORKDIR /app                                                                                                                                    0.0s\n=&gt; CACHED [builder 4/7] COPY go.mod go.sum ./                                                                                                                           0.0s\n=&gt; CACHED [builder 5/7] RUN go mod download                                                                                                                             0.0s\n=&gt; [builder 6/7] COPY . .                                                                                                                                               0.2s\n=&gt; [builder 7/7] RUN CGO_ENABLED=0 GOOS=linux go build -o budget-tracker-api-v2 .                                                                                       4.8s\n=&gt; CACHED [stage-1 2/4] WORKDIR /app                                                                                                                                    0.0s\n=&gt; CACHED [stage-1 3/4] COPY --from=builder /app/swagger ./swagger/                                                                                                     0.0s\n=&gt; [stage-1 4/4] COPY --from=builder /app/budget-tracker-api-v2 .                                                                                                       0.0s\n=&gt; exporting to image                                                                                                                                                   0.5s\n=&gt; =&gt; exporting layers                                                                                                                                                  0.4s\n=&gt; =&gt; exporting manifest sha256:a9f0b6561601825e76aeee128dcc4e349c0c17e06db981e25add21838026bc8b                                                                        0.0s\n=&gt; =&gt; exporting config sha256:df60031fc931fdb2c36cdbaf5f23422efb9e3a4af99fcb2fdd954ef04492406d                                                                          0.0s\n=&gt; =&gt; exporting attestation manifest sha256:a6979f79f320c577abc68a2000678a4a6ce712e7dbaf886f2415402f28eb923d                                                            0.0s\n=&gt; =&gt; exporting manifest list sha256:c1a90d916a673f2ba911be810d0fadaa2ff071f35f6125fd520e4a16ebc09e56                                                                   0.0s\n=&gt; =&gt; naming to docker.io/library/budget-tracker-api:local                                                                                                              0.0s\n=&gt; =&gt; unpacking to docker.io/library/budget-tracker-api:local                                                                                                           0.1s\n</code></pre>"},{"location":"development/local/run_with_kubernetes.html#load-your-newest-image-to-your-local-k8s-cluster","title":"Load your newest image to your local k8s cluster","text":"ShellShell Output <pre><code># the `--name` flag is to refer the cluster name you created previously through `kind` command\nkind load docker-image budget-tracker-api:local --name budget-tracker-cluster\n</code></pre> <pre><code>Image: \"budget-tracker-api:local\" with ID \"sha256:6bff76bdd6a32204c80eb37f758083c715fcf21e2b6db8d86bc73af229d9ae04\" not yet present on node \"budget-tracker-cluster-control-plane\", loading...\n</code></pre>"},{"location":"development/local/run_with_kubernetes.html#deploying-the-app-through-a-helm-chart","title":"Deploying the app through a helm chart","text":"<p>No external dependencies</p> <p>This method will only deploy <code>budget-tracker-api</code> itself to k8s and no other dependencies such as: jaeger or a k8s' version of mongoDB.</p>"},{"location":"development/local/run_with_kubernetes.html#blindly","title":"Blindly","text":"<p>If you already built your image with the default suggested name, you can simply use the <code>make</code> command to generate all chart's manifests and apply them to your local k8s cluster through <code>demo</code> namespace:</p> ShellShell output <pre><code>make k8s-apply\n</code></pre> <pre><code>namespace/demo created\nsecret/mongodb-credentials created\nservice/local-dev-budget-tracker-api created\ndeployment.apps/local-dev-budget-tracker-api created\n</code></pre>"},{"location":"development/local/run_with_kubernetes.html#inspect-your-manifests-before-applying-them","title":"Inspect your manifests before applying them","text":"<p>If you want to inspect your manifests, especially when developing features to it's chart, you can run the following command:</p> <pre><code>helm template --release-name local-dev ./helm &gt; manifests.yaml\n\ncat manifests.yaml\n</code></pre> <p>Once you are satisfied with them, simply apply it:</p> <pre><code>kubectl apply -f manifests.yaml -n demo\n</code></pre>"},{"location":"development/local/run_with_kubernetes.html#checking-the-status-of-deployment","title":"Checking the status of deployment","text":"<p>If you inspect your pods, you will see both replicas will be throwing error. Why is that? We set a static secret with dummy credentials, is not pointing to any MongoDB's instance:</p> ShellShell outcome <pre><code>kubectl get pods -n demo\n</code></pre> <pre><code>NAME                                            READY   STATUS   RESTARTS     AGE\nlocal-dev-budget-tracker-api-6675886dd7-6s8wl   0/1     Error    1 (1s ago)   2s\nlocal-dev-budget-tracker-api-6675886dd7-v7gp8   0/1     Error    1 (1s ago)   2s\n</code></pre> <p>Let's validate the logs of one of those:</p> ShellShell outcome <pre><code>kubectl logs local-dev-budget-tracker-api-6675886dd7-6s8wl -n demo\n</code></pre> <pre><code>mongodb+srv://mongodb-atlas-example.mongodb.net/\n{\"level\":\"fatal\",\"msg\":\"error parsing uri: lookup _mongodb._tcp.mongodb-atlas-example.mongodb.net on 10.96.0.10:53: no such host\",\"time\":\"2025-10-14T17:47:03Z\"}\n</code></pre> <p>Indeed, there is no such host <code>mongodb-atlas-example.mongodb.net</code> created. You must change your credentials within your Kubernetes to match your correct MongoDB's credentials.</p> ShellShell outcome <pre><code>kubectl get secret -n demo mongodb-credentials -o yaml\n</code></pre> <pre><code>apiVersion: v1\ndata:\n  host: bW9uZ29kYitzcnY6Ly9tb25nb2RiLWF0bGFzLWV4YW1wbGUubW9uZ29kYi5uZXQv\n  password: ZXhhbXBsZQ==\n  username: cm9vdA==\nkind: Secret\nmetadata:\n  name: mongodb-credentials\n  namespace: demo\ntype: Opaque\n</code></pre> <p>Use your favorite method to edit this file.</p>"},{"location":"development/local/run_with_kubernetes.html#working-with-a-mongodb-installed-within-k8s-as-well","title":"Working with a mongoDB installed within k8s as well","text":"<p>If you prefer to install mongoDB as a kubernetes application as well instead of using the Mongo Atlas version, you can do it.</p> <p>Go to your <code>values.yaml</code> and enable mongodb's integration by setting the following property as <code>true</code>:</p> <pre><code>mongodb:\n  enabled: true\n</code></pre> <p>Once true, if you generate all manifests through <code>make k8s-apply</code> the mongoDB dependency will be installed in <code>default</code> namespace.</p> <p>A sidecar will be injected automatically to insert the initial user, similar approach used during Running locally with containers</p> <p>You can also validate through the logs if the user was injected successfuly:</p> ShellShell output <pre><code>kubectl get pods -n default\n</code></pre> <pre><code>NAME                                READY   STATUS    RESTARTS   AGE\nlocal-dev-mongodb-7dc8b8474-x9bpn   2/2     Running   0          3h21m\n</code></pre> ShellShell output <pre><code>kubectl logs local-dev-mongodb-7dc8b8474-x9bpn -c seed-data\n</code></pre> <pre><code>Waiting for MongoDB to start...\nInjecting initial user data...\n2025-10-14T21:59:18.728+0000    connected to: mongodb://local-dev-mongodb:27017/\n2025-10-14T21:59:18.738+0000    1 document(s) imported successfully. 0 document(s) failed to import.\nDone seeding, sleeping forever...\n</code></pre> <p>Credentials</p> <p>Be aware that for the sake of testing, local mongoDB will be created with default credentials. Feel free to change it locally to a one on your one as a good practice.</p> <p>Milestone reached</p> <p>Congrats! You pass throught a lot of steps to run such containers within a k8s cluster. The next section will be about validating with some valid requests.</p>"},{"location":"development/local/run_with_kubernetes.html#validating-budget-tracker-api-api-rest","title":"Validating <code>budget-tracker-api</code> API rest","text":"<p>With every pod up and running, you are now able to test your REST API. With Kubernetes, there are many ways to expose your app but for the sake of local-development, we will rely on port-forward to it:</p> Shell <pre><code>kubectl port-forward svc/local-dev-budget-tracker-api 8080:8080 -n demo\n</code></pre> Shell output <pre><code>Forwarding from 127.0.0.1:8080 -&gt; 8080\nForwarding from [::1]:8080 -&gt; 8080\nHandling connection for 8080\n</code></pre> <p>This command will use the default settings of port <code>8080</code> and namespace <code>demo</code> to allow you to reach a certain k8s service, locally.</p> <p>With any client (<code>curl</code>, Insomnia, etc), perform a simple request to <code>/health</code> from your local machine.</p> <p></p> <p>Let's test a token generation with a <code>POST</code> request, based on the mongodb credentials:</p> <p></p>"},{"location":"development/local/run_without_containers.html","title":"Without containers","text":""},{"location":"development/local/run_without_containers.html#running-the-code-locally","title":"Running the code locally","text":"<p>In this section, let's explore how you can run the platform locally without using container images.</p> <p>Running with or without containers?</p> <p>My personal preference is to always work with containers for everything. My advice is to go through the documentation on \u201crunning without containers,\u201d but in the end, stick with using containers.</p>"},{"location":"development/local/run_without_containers.html#without-containers","title":"Without containers","text":"<p>If you don't have/want any container engines running the app, you can build and run the platform by following these steps:</p> ShellShell outcome <pre><code>cd budget-tracker-api-v2\n\n# Ensure you have successfully `cd`ed to the correct directory by running:\npwd\n</code></pre> <pre><code>/Users/${my-user}/Code/budget-tracker-api-v2\n</code></pre> ShellShell outocome <pre><code>ls\n</code></pre> <pre><code>CHECKLIST.md            Dockerfile          go.sum              LICENSE             otel-collector-config.yaml  swagger\ndocker              docs                hack                main.go             README.md\ndocker-compose.yml      go.mod              internal            Makefile            sonar-project.properties\n</code></pre>"},{"location":"development/local/run_without_containers.html#building-and-running-your-app","title":"building and running your app","text":"<p>Since our app was written in <code>go</code>, we will use the binary to compile the locally:</p> Shell <pre><code># Install the needed dependencies:\ngo mod tidy\n\n# Build the binary\ngo build . -o budget-tracker\n</code></pre> <p>This command - if successful - will generate a local binary called <code>budget-tracker</code>.</p> <p>Now, you can simply run it:</p> Shell <pre><code># This command will make your binary \"runnable\"\nchmod +x budget-tracker\n\n# Finally, run the binary\n./budget-tracker-api\n</code></pre> <p>Ops! The app wasn't able to run, according to it's message</p> <pre><code>{\n    \"level\":\"fatal\",\n    \"msg\":\"empty MONGODB_HOST, MONGODB_USER or MONGODB_PASS env vars for mongodb\",\n    \"time\":\"2025-10-13T13:24:46-03:00\"\n}\n</code></pre> <p>The only external dependency for this application is a MongoDB database, as shown on the architecture page. This means we need to provide a functional MongoDB instance to the application\u2014either locally (e.g., through a container) or externally (e.g., via Atlas).</p> <p>If you try to pass a fake host or a non-existent MongoDB URL, the app will fail to start.</p> <p>Here\u2019s an example of a functional command that passes environment variables:</p> <pre><code># This command will pass environment variables directly\n## to your application's process\n\nMONGODB_HOST=\"mongodb+srv://my-mongodb-atlas-url.mongodb.net\" \\\nMONGODB_USER=\"user\" \\\nMONGODB_PASS=\"pass\" \\\n./budget-tracker-api\n</code></pre> <p>You could also export these variables globally but for simplicity we are not using this option for now:</p> Shell <pre><code>export MONGODB_HOST=\"mongodb+srv://my-mongodb-atlas-url.mongodb.net\" \\\nexport MONGODB_USER=\"user\" \\\nexport MONGODB_PASS=\"pass\"\n</code></pre> Shell <pre><code>./budget-tracker-api\n</code></pre>"},{"location":"development/local/run_without_containers.html#dealing-with-mongodbs-dependency","title":"Dealing with MongoDB's dependency","text":"<p>Let\u2019s take this chance (if you haven\u2019t set up your MongoDB Atlas instance yet) to grab your credentials from Atlas and run the app for the first time. Just replace the environment variable values in your command:</p> Shell <pre><code>MONGODB_HOST=\"mongodb+srv://my-example.fj2qq.mongodb.net/\" \\\nMONGODB_USER=\"my-user\" \\\nMONGODB_PASS=\"my-pass\" \\\n./budget-tracker-api\n</code></pre> <p>You should expect then the following outcome</p> <pre><code>{\"level\":\"info\",\"msg\":\"Server running on :8080\",\"time\":\"2025-10-13T13:42:04-03:00\"}\n</code></pre> <p>Now, we can simply test it locally by running a simple <code>curl</code> command:</p> Shell <pre><code># According to the app logs, the platform is running under port `8080`\n## According to the swagger, we can check there is a `/health` endpoint\n\ncurl http://localhost:8080/health\n</code></pre> <p>This is the expected outcome</p> <pre><code>{\n    \"message\": \"healthy\",\n    \"app\": true,\n    \"database\": true\n}\n</code></pre> <p>This means we made a request to our app, which validated if it's connection with MongoDB is working properly. This endpoint is particularly useful when you have High-Availability mechanisms such as Kubernetes' healthcheck.</p>"},{"location":"development/observability/traces.html","title":"Traces","text":""},{"location":"development/observability/traces.html#visualizing-traces","title":"Visualizing traces","text":"<p>By default, the application will forward all it's traces to an opentelemetry collector, which forwards traces to a local jaeger installation.</p> <p>Both containers can be created through <code>docker-compose up -d</code>.</p> <p>To access jaeger UI local container, simply access: http://localhost:16686:</p> <p></p>"},{"location":"development/observability/traces.html#generating-traces","title":"Generating traces","text":"<p>Let's explore a new request and see it's flow through the traces. Let's say I have a valid user and I would like to generate a new token:</p> <p></p>"},{"location":"development/observability/traces.html#observing-traces-through-jaeger","title":"Observing traces through Jaeger","text":"<p>Now that you completed the request and got a <code>201</code>, let's see how it ends up within our tracing-platform. Through Jaeger: go to the home page and click in <code>Find Traces</code> button.</p> <p></p> <p></p> <p></p> <p>This is how Jaeger will looks like after a few different requests:</p> <p></p>"},{"location":"home/architecture.html","title":"Architecture","text":""},{"location":"home/architecture.html#architecture","title":"Architecture","text":"<p>Budget Tracker has - for now - a simple architecture, only requiring MongoDB to save your data.</p> <p> </p>"}]}